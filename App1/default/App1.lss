
App1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007a  00800060  00000bc2  00000c56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000081a  008000da  008000da  00000cd0  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000301  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011a5  00000000  00000000  00001071  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000635  00000000  00000000  00002216  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cde  00000000  00000000  0000284b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  0000352c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044b  00000000  00000000  000037bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008d6  00000000  00000000  00003c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000044dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000054 <kolumny>:
  54:	10 20 40 80                                         . @.

00000058 <tab>:
  58:	01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10     ................
	...

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf e5       	ldi	r28, 0x5F	; 95
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	e2 ec       	ldi	r30, 0xC2	; 194
  7e:	fb e0       	ldi	r31, 0x0B	; 11
  80:	02 c0       	rjmp	.+4      	; 0x86 <.do_copy_data_start>

00000082 <.do_copy_data_loop>:
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0

00000086 <.do_copy_data_start>:
  86:	aa 3d       	cpi	r26, 0xDA	; 218
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <.do_copy_data_loop>

0000008c <__do_clear_bss>:
  8c:	18 e0       	ldi	r17, 0x08	; 8
  8e:	aa ed       	ldi	r26, 0xDA	; 218
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a4 3f       	cpi	r26, 0xF4	; 244
  98:	b1 07       	cpc	r27, r17
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>
  9c:	0e 94 35 01 	call	0x26a	; 0x26a <main>
  a0:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <option2_action>:
		}

void option2_action(void) {
    // Action for option 2
		return;
}
  a8:	08 95       	ret

000000aa <option1_action>:



void option1_action(void) {
    // Action for option 1
	menu_goto(currentMenu,1);
  aa:	80 91 40 01 	lds	r24, 0x0140
  ae:	90 91 41 01 	lds	r25, 0x0141
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	0e 94 18 04 	call	0x830	; 0x830 <menu_goto>
	
	return;
		}
  b8:	08 95       	ret

000000ba <goToMainMenu>:
void goToMenu4(Menu **currentMenuPtr) {
    *currentMenuPtr = &menu4;
    menu_display(*currentMenuPtr);
}

void goToMainMenu(Menu **currentMenuPtr) {
  ba:	fc 01       	movw	r30, r24
    *currentMenuPtr = &mainMenu;
  bc:	82 e4       	ldi	r24, 0x42	; 66
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	91 83       	std	Z+1, r25	; 0x01
  c2:	80 83       	st	Z, r24
    menu_display(*currentMenuPtr);
  c4:	0e 94 be 03 	call	0x77c	; 0x77c <menu_display>
}
  c8:	08 95       	ret

000000ca <goToMenu4>:
void goToMenu3(Menu **currentMenuPtr) {
    *currentMenuPtr = &menu3;
    menu_display(*currentMenuPtr);
}

void goToMenu4(Menu **currentMenuPtr) {
  ca:	fc 01       	movw	r30, r24
    *currentMenuPtr = &menu4;
  cc:	8c ec       	ldi	r24, 0xCC	; 204
  ce:	92 e0       	ldi	r25, 0x02	; 2
  d0:	91 83       	std	Z+1, r25	; 0x01
  d2:	80 83       	st	Z, r24
    menu_display(*currentMenuPtr);
  d4:	0e 94 be 03 	call	0x77c	; 0x77c <menu_display>
}
  d8:	08 95       	ret

000000da <goToMenu3>:
void goToMenu2(Menu **currentMenuPtr) {
    *currentMenuPtr = &menu2;
    menu_display(*currentMenuPtr);
}

void goToMenu3(Menu **currentMenuPtr) {
  da:	fc 01       	movw	r30, r24
    *currentMenuPtr = &menu3;
  dc:	86 e5       	ldi	r24, 0x56	; 86
  de:	94 e0       	ldi	r25, 0x04	; 4
  e0:	91 83       	std	Z+1, r25	; 0x01
  e2:	80 83       	st	Z, r24
    menu_display(*currentMenuPtr);
  e4:	0e 94 be 03 	call	0x77c	; 0x77c <menu_display>
}
  e8:	08 95       	ret

000000ea <goToMenu2>:
void goToMenu1(Menu **currentMenuPtr) {
    *currentMenuPtr = &menu1;
    menu_display(*currentMenuPtr);
}

void goToMenu2(Menu **currentMenuPtr) {
  ea:	fc 01       	movw	r30, r24
    *currentMenuPtr = &menu2;
  ec:	81 e9       	ldi	r24, 0x91	; 145
  ee:	93 e0       	ldi	r25, 0x03	; 3
  f0:	91 83       	std	Z+1, r25	; 0x01
  f2:	80 83       	st	Z, r24
    menu_display(*currentMenuPtr);
  f4:	0e 94 be 03 	call	0x77c	; 0x77c <menu_display>
}
  f8:	08 95       	ret

000000fa <goToMenu1>:
			
	
}


void goToMenu1(Menu **currentMenuPtr) {
  fa:	fc 01       	movw	r30, r24
    *currentMenuPtr = &menu1;
  fc:	87 e0       	ldi	r24, 0x07	; 7
  fe:	92 e0       	ldi	r25, 0x02	; 2
 100:	91 83       	std	Z+1, r25	; 0x01
 102:	80 83       	st	Z, r24
    menu_display(*currentMenuPtr);
 104:	0e 94 be 03 	call	0x77c	; 0x77c <menu_display>
}
 108:	08 95       	ret

0000010a <setupMenus>:

volatile Menu *currentMenu;

Menu mainMenu, menu1, menu2, menu3, menu4;

void setupMenus() {
 10a:	2f 92       	push	r2
 10c:	3f 92       	push	r3
 10e:	4f 92       	push	r4
 110:	5f 92       	push	r5
 112:	6f 92       	push	r6
 114:	7f 92       	push	r7
 116:	8f 92       	push	r8
 118:	9f 92       	push	r9
 11a:	af 92       	push	r10
 11c:	bf 92       	push	r11
 11e:	cf 92       	push	r12
 120:	df 92       	push	r13
 122:	ef 92       	push	r14
 124:	ff 92       	push	r15
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29

    // Initialize menus
    menu_init(&mainMenu, 0, &lcd1, NULL);
 12e:	62 e4       	ldi	r22, 0x42	; 66
 130:	e6 2e       	mov	r14, r22
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	f6 2e       	mov	r15, r22
 136:	0c e3       	ldi	r16, 0x3C	; 60
 138:	11 e0       	ldi	r17, 0x01	; 1
 13a:	c7 01       	movw	r24, r14
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	a8 01       	movw	r20, r16
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	0e 94 a0 03 	call	0x740	; 0x740 <menu_init>
    menu_init(&menu1, 1, &lcd1, &mainMenu);
 148:	57 e0       	ldi	r21, 0x07	; 7
 14a:	45 2e       	mov	r4, r21
 14c:	52 e0       	ldi	r21, 0x02	; 2
 14e:	55 2e       	mov	r5, r21
 150:	c2 01       	movw	r24, r4
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	a8 01       	movw	r20, r16
 156:	97 01       	movw	r18, r14
 158:	0e 94 a0 03 	call	0x740	; 0x740 <menu_init>
    menu_init(&menu2, 2, &lcd1, &mainMenu);
 15c:	41 e9       	ldi	r20, 0x91	; 145
 15e:	24 2e       	mov	r2, r20
 160:	43 e0       	ldi	r20, 0x03	; 3
 162:	34 2e       	mov	r3, r20
 164:	c1 01       	movw	r24, r2
 166:	62 e0       	ldi	r22, 0x02	; 2
 168:	a8 01       	movw	r20, r16
 16a:	97 01       	movw	r18, r14
 16c:	0e 94 a0 03 	call	0x740	; 0x740 <menu_init>
    menu_init(&menu3, 3, &lcd1, &mainMenu);
 170:	36 e5       	ldi	r19, 0x56	; 86
 172:	63 2e       	mov	r6, r19
 174:	34 e0       	ldi	r19, 0x04	; 4
 176:	73 2e       	mov	r7, r19
 178:	c3 01       	movw	r24, r6
 17a:	63 e0       	ldi	r22, 0x03	; 3
 17c:	a8 01       	movw	r20, r16
 17e:	97 01       	movw	r18, r14
 180:	0e 94 a0 03 	call	0x740	; 0x740 <menu_init>
	menu_init(&menu4, 4, &lcd1, &menu3);
 184:	cc ec       	ldi	r28, 0xCC	; 204
 186:	d2 e0       	ldi	r29, 0x02	; 2
 188:	ce 01       	movw	r24, r28
 18a:	64 e0       	ldi	r22, 0x04	; 4
 18c:	a8 01       	movw	r20, r16
 18e:	93 01       	movw	r18, r6
 190:	0e 94 a0 03 	call	0x740	; 0x740 <menu_init>

    // Add items to mainMenu
    menu_addItem(&mainMenu, "Menu 1", goToMenu1);
 194:	c7 01       	movw	r24, r14
 196:	60 e6       	ldi	r22, 0x60	; 96
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	4d e7       	ldi	r20, 0x7D	; 125
 19c:	50 e0       	ldi	r21, 0x00	; 0
 19e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <menu_addItem>
    menu_addItem(&mainMenu, "Menu 2", goToMenu2);
 1a2:	c7 01       	movw	r24, r14
 1a4:	67 e6       	ldi	r22, 0x67	; 103
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	45 e7       	ldi	r20, 0x75	; 117
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	0e 94 71 04 	call	0x8e2	; 0x8e2 <menu_addItem>
    menu_addItem(&mainMenu, "Menu 3", goToMenu3);
 1b0:	c7 01       	movw	r24, r14
 1b2:	6e e6       	ldi	r22, 0x6E	; 110
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	4d e6       	ldi	r20, 0x6D	; 109
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	0e 94 71 04 	call	0x8e2	; 0x8e2 <menu_addItem>


    menu_addItem(&menu1, "Option 1", option1_action);
 1be:	25 e5       	ldi	r18, 0x55	; 85
 1c0:	c2 2e       	mov	r12, r18
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	d2 2e       	mov	r13, r18
 1c6:	05 e7       	ldi	r16, 0x75	; 117
 1c8:	10 e0       	ldi	r17, 0x00	; 0
 1ca:	c2 01       	movw	r24, r4
 1cc:	b8 01       	movw	r22, r16
 1ce:	a6 01       	movw	r20, r12
 1d0:	0e 94 71 04 	call	0x8e2	; 0x8e2 <menu_addItem>
    menu_addItem(&menu1, "Option 2", option2_action);
 1d4:	94 e5       	ldi	r25, 0x54	; 84
 1d6:	89 2e       	mov	r8, r25
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	99 2e       	mov	r9, r25
 1dc:	8e e7       	ldi	r24, 0x7E	; 126
 1de:	a8 2e       	mov	r10, r24
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	b8 2e       	mov	r11, r24
 1e4:	c2 01       	movw	r24, r4
 1e6:	b5 01       	movw	r22, r10
 1e8:	a4 01       	movw	r20, r8
 1ea:	0e 94 71 04 	call	0x8e2	; 0x8e2 <menu_addItem>

	menu_addItem(&menu2, "Option 1", option1_action);
 1ee:	c1 01       	movw	r24, r2
 1f0:	b8 01       	movw	r22, r16
 1f2:	a6 01       	movw	r20, r12
 1f4:	0e 94 71 04 	call	0x8e2	; 0x8e2 <menu_addItem>
    menu_addItem(&menu2, "Option 2", option2_action);
 1f8:	c1 01       	movw	r24, r2
 1fa:	b5 01       	movw	r22, r10
 1fc:	a4 01       	movw	r20, r8
 1fe:	0e 94 71 04 	call	0x8e2	; 0x8e2 <menu_addItem>

	menu_addItem(&menu3, "Option 1", option1_action);
 202:	c3 01       	movw	r24, r6
 204:	b8 01       	movw	r22, r16
 206:	a6 01       	movw	r20, r12
 208:	0e 94 71 04 	call	0x8e2	; 0x8e2 <menu_addItem>
    menu_addItem(&menu3, "Return", goToMenu4);
 20c:	c3 01       	movw	r24, r6
 20e:	67 e8       	ldi	r22, 0x87	; 135
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	45 e6       	ldi	r20, 0x65	; 101
 214:	50 e0       	ldi	r21, 0x00	; 0
 216:	0e 94 71 04 	call	0x8e2	; 0x8e2 <menu_addItem>

	menu_addItem(&menu4, "Main Menu", goToMainMenu);
 21a:	ce 01       	movw	r24, r28
 21c:	6e e8       	ldi	r22, 0x8E	; 142
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	4d e5       	ldi	r20, 0x5D	; 93
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	0e 94 71 04 	call	0x8e2	; 0x8e2 <menu_addItem>
    menu_addItem(&menu4, "Menu 1", goToMenu1);
 228:	ce 01       	movw	r24, r28
 22a:	60 e6       	ldi	r22, 0x60	; 96
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	4d e7       	ldi	r20, 0x7D	; 125
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	0e 94 71 04 	call	0x8e2	; 0x8e2 <menu_addItem>

	currentMenu = &mainMenu;
 236:	f0 92 41 01 	sts	0x0141, r15
 23a:	e0 92 40 01 	sts	0x0140, r14

    // Display the main menu
    menu_display(&mainMenu);
 23e:	c7 01       	movw	r24, r14
 240:	0e 94 be 03 	call	0x77c	; 0x77c <menu_display>
}
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	1f 91       	pop	r17
 24a:	0f 91       	pop	r16
 24c:	ff 90       	pop	r15
 24e:	ef 90       	pop	r14
 250:	df 90       	pop	r13
 252:	cf 90       	pop	r12
 254:	bf 90       	pop	r11
 256:	af 90       	pop	r10
 258:	9f 90       	pop	r9
 25a:	8f 90       	pop	r8
 25c:	7f 90       	pop	r7
 25e:	6f 90       	pop	r6
 260:	5f 90       	pop	r5
 262:	4f 90       	pop	r4
 264:	3f 90       	pop	r3
 266:	2f 90       	pop	r2
 268:	08 95       	ret

0000026a <main>:




int main(void)
{
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
	// Set kbd port
	set_DDR('A');
 26e:	81 e4       	ldi	r24, 0x41	; 65
 270:	0e 94 ce 01 	call	0x39c	; 0x39c <set_DDR>
	//Led bar
	DDRD =0xFF;
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	81 bb       	out	0x11, r24	; 17
	PORTD =0xFF;
 278:	82 bb       	out	0x12, r24	; 18


    LCD_init(&lcd1, 'B'); // Initialize LCD on PORTB
 27a:	8c e3       	ldi	r24, 0x3C	; 60
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	62 e4       	ldi	r22, 0x42	; 66
 280:	0e 94 65 03 	call	0x6ca	; 0x6ca <LCD_init>


    menu_init(&mainMenu, 0, &lcd1, NULL);
 284:	02 e4       	ldi	r16, 0x42	; 66
 286:	11 e0       	ldi	r17, 0x01	; 1
 288:	c8 01       	movw	r24, r16
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	4c e3       	ldi	r20, 0x3C	; 60
 28e:	51 e0       	ldi	r21, 0x01	; 1
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	0e 94 a0 03 	call	0x740	; 0x740 <menu_init>

 	// Add items to Menu
    menu_addItem(&mainMenu, "Menu 1", option1_action);
 298:	c8 01       	movw	r24, r16
 29a:	60 e6       	ldi	r22, 0x60	; 96
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	45 e5       	ldi	r20, 0x55	; 85
 2a0:	50 e0       	ldi	r21, 0x00	; 0
 2a2:	0e 94 71 04 	call	0x8e2	; 0x8e2 <menu_addItem>
    menu_addItem(&mainMenu, "Menu 2", goToMenu2);
 2a6:	c8 01       	movw	r24, r16
 2a8:	67 e6       	ldi	r22, 0x67	; 103
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	45 e7       	ldi	r20, 0x75	; 117
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	0e 94 71 04 	call	0x8e2	; 0x8e2 <menu_addItem>
    menu_addItem(&mainMenu, "Menu 3", goToMenu3);
 2b4:	c8 01       	movw	r24, r16
 2b6:	6e e6       	ldi	r22, 0x6E	; 110
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	4d e6       	ldi	r20, 0x6D	; 109
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	0e 94 71 04 	call	0x8e2	; 0x8e2 <menu_addItem>

	menu_init(&menu1, 1, &lcd1, &mainMenu);
 2c2:	87 e0       	ldi	r24, 0x07	; 7
 2c4:	92 e0       	ldi	r25, 0x02	; 2
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	4c e3       	ldi	r20, 0x3C	; 60
 2ca:	51 e0       	ldi	r21, 0x01	; 1
 2cc:	98 01       	movw	r18, r16
 2ce:	0e 94 a0 03 	call	0x740	; 0x740 <menu_init>
	menu_addItem(&menu1, "Sm1", option1_action);
 2d2:	87 e0       	ldi	r24, 0x07	; 7
 2d4:	92 e0       	ldi	r25, 0x02	; 2
 2d6:	68 e9       	ldi	r22, 0x98	; 152
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	45 e5       	ldi	r20, 0x55	; 85
 2dc:	50 e0       	ldi	r21, 0x00	; 0
 2de:	0e 94 71 04 	call	0x8e2	; 0x8e2 <menu_addItem>
    menu_addItem(&menu1, "Sm2", option2_action);
 2e2:	87 e0       	ldi	r24, 0x07	; 7
 2e4:	92 e0       	ldi	r25, 0x02	; 2
 2e6:	6c e9       	ldi	r22, 0x9C	; 156
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	44 e5       	ldi	r20, 0x54	; 84
 2ec:	50 e0       	ldi	r21, 0x00	; 0
 2ee:	0e 94 71 04 	call	0x8e2	; 0x8e2 <menu_addItem>


    // Display the main menu
    menu_display(&mainMenu);
 2f2:	c8 01       	movw	r24, r16
 2f4:	0e 94 be 03 	call	0x77c	; 0x77c <menu_display>

	currentMenu = &mainMenu;
 2f8:	10 93 41 01 	sts	0x0141, r17
 2fc:	00 93 40 01 	sts	0x0140, r16


    while (1) 
    {
		PORTD = get_key('d', 'A');
 300:	84 e6       	ldi	r24, 0x64	; 100
 302:	61 e4       	ldi	r22, 0x41	; 65
 304:	0e 94 32 02 	call	0x464	; 0x464 <get_key>
 308:	82 bb       	out	0x12, r24	; 18
		
			

			 switch (get_key('d', 'A')) {
 30a:	84 e6       	ldi	r24, 0x64	; 100
 30c:	61 e4       	ldi	r22, 0x41	; 65
 30e:	0e 94 32 02 	call	0x464	; 0x464 <get_key>
 312:	88 30       	cpi	r24, 0x08	; 8
 314:	89 f0       	breq	.+34     	; 0x338 <main+0xce>
 316:	89 30       	cpi	r24, 0x09	; 9
 318:	1c f4       	brge	.+6      	; 0x320 <main+0xb6>
 31a:	84 30       	cpi	r24, 0x04	; 4
 31c:	89 f7       	brne	.-30     	; 0x300 <main+0x96>
 31e:	05 c0       	rjmp	.+10     	; 0x32a <main+0xc0>
 320:	8c 30       	cpi	r24, 0x0C	; 12
 322:	89 f0       	breq	.+34     	; 0x346 <main+0xdc>
 324:	80 31       	cpi	r24, 0x10	; 16
 326:	61 f7       	brne	.-40     	; 0x300 <main+0x96>
 328:	24 c0       	rjmp	.+72     	; 0x372 <main+0x108>
            case 4: // Up
                menu_prevItem(currentMenu);
 32a:	80 91 40 01 	lds	r24, 0x0140
 32e:	90 91 41 01 	lds	r25, 0x0141
 332:	0e 94 4f 04 	call	0x89e	; 0x89e <menu_prevItem>
 336:	e4 cf       	rjmp	.-56     	; 0x300 <main+0x96>

                break;
            case 8: // Down
                menu_nextItem(currentMenu);
 338:	80 91 40 01 	lds	r24, 0x0140
 33c:	90 91 41 01 	lds	r25, 0x0141
 340:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <menu_nextItem>
 344:	dd cf       	rjmp	.-70     	; 0x300 <main+0x96>

                break;
            case 12: // Enter
			if (currentMenu->parentMenu != NULL){
 346:	e0 91 40 01 	lds	r30, 0x0140
 34a:	f0 91 41 01 	lds	r31, 0x0141
 34e:	ed 53       	subi	r30, 0x3D	; 61
 350:	ff 4f       	sbci	r31, 0xFF	; 255
 352:	80 81       	ld	r24, Z
 354:	91 81       	ldd	r25, Z+1	; 0x01
 356:	89 2b       	or	r24, r25
 358:	99 f2       	breq	.-90     	; 0x300 <main+0x96>
                menu_selectItem(&currentMenu); // Pass the address of currentMenu
 35a:	80 e4       	ldi	r24, 0x40	; 64
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	0e 94 2e 04 	call	0x85c	; 0x85c <menu_selectItem>



void option1_action(void) {
    // Action for option 1
	menu_goto(currentMenu,1);
 362:	80 91 40 01 	lds	r24, 0x0140
 366:	90 91 41 01 	lds	r25, 0x0141
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	0e 94 18 04 	call	0x830	; 0x830 <menu_goto>
 370:	c7 cf       	rjmp	.-114    	; 0x300 <main+0x96>
			
			}

                break;
            case 16: // Return
                if (currentMenu->parentMenu != NULL) {
 372:	e0 91 40 01 	lds	r30, 0x0140
 376:	f0 91 41 01 	lds	r31, 0x0141
 37a:	ed 53       	subi	r30, 0x3D	; 61
 37c:	ff 4f       	sbci	r31, 0xFF	; 255
 37e:	80 81       	ld	r24, Z
 380:	91 81       	ldd	r25, Z+1	; 0x01
 382:	89 2b       	or	r24, r25
 384:	09 f4       	brne	.+2      	; 0x388 <main+0x11e>
 386:	bc cf       	rjmp	.-136    	; 0x300 <main+0x96>
                    currentMenu = currentMenu->parentMenu;
 388:	20 81       	ld	r18, Z
 38a:	31 81       	ldd	r19, Z+1	; 0x01
 38c:	20 93 40 01 	sts	0x0140, r18
 390:	30 93 41 01 	sts	0x0141, r19
                    menu_display(currentMenu);
 394:	c9 01       	movw	r24, r18
 396:	0e 94 be 03 	call	0x77c	; 0x77c <menu_display>
 39a:	b2 cf       	rjmp	.-156    	; 0x300 <main+0x96>

0000039c <set_DDR>:
								9,10,11,12,
								13,14,15,16,
								0};

void set_DDR(char port_name){
	switch(port_name){
 39c:	82 34       	cpi	r24, 0x42	; 66
 39e:	79 f0       	breq	.+30     	; 0x3be <set_DDR+0x22>
 3a0:	83 34       	cpi	r24, 0x43	; 67
 3a2:	18 f4       	brcc	.+6      	; 0x3aa <set_DDR+0xe>
 3a4:	81 34       	cpi	r24, 0x41	; 65
 3a6:	c9 f4       	brne	.+50     	; 0x3da <set_DDR+0x3e>
 3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <set_DDR+0x18>
 3aa:	83 34       	cpi	r24, 0x43	; 67
 3ac:	69 f0       	breq	.+26     	; 0x3c8 <set_DDR+0x2c>
 3ae:	84 34       	cpi	r24, 0x44	; 68
 3b0:	a1 f4       	brne	.+40     	; 0x3da <set_DDR+0x3e>
 3b2:	0f c0       	rjmp	.+30     	; 0x3d2 <set_DDR+0x36>
		case 'A':
		DDRA = 0xF0;
 3b4:	80 ef       	ldi	r24, 0xF0	; 240
 3b6:	8a bb       	out	0x1a, r24	; 26
		PORTA=0x0F;
 3b8:	8f e0       	ldi	r24, 0x0F	; 15
 3ba:	8b bb       	out	0x1b, r24	; 27
 3bc:	08 95       	ret
		
		break;
		case 'B':
		DDRB = 0xF0;
 3be:	80 ef       	ldi	r24, 0xF0	; 240
 3c0:	87 bb       	out	0x17, r24	; 23
		PORTB=0x0F;
 3c2:	8f e0       	ldi	r24, 0x0F	; 15
 3c4:	88 bb       	out	0x18, r24	; 24
 3c6:	08 95       	ret
		
		break;
		case 'C':
		DDRC = 0xF0;
 3c8:	80 ef       	ldi	r24, 0xF0	; 240
 3ca:	84 bb       	out	0x14, r24	; 20
		PORTC=0x0F;
 3cc:	8f e0       	ldi	r24, 0x0F	; 15
 3ce:	85 bb       	out	0x15, r24	; 21
 3d0:	08 95       	ret
		
		break;
		
		case 'D':
		DDRD = 0xF0;
 3d2:	80 ef       	ldi	r24, 0xF0	; 240
 3d4:	81 bb       	out	0x11, r24	; 17
		PORTD=0x0F;
 3d6:	8f e0       	ldi	r24, 0x0F	; 15
 3d8:	82 bb       	out	0x12, r24	; 18
 3da:	08 95       	ret

000003dc <setPort>:
}//koniec getKey


void setPort(const char port_name, int8_t state)
{
	switch(port_name)
 3dc:	82 34       	cpi	r24, 0x42	; 66
 3de:	61 f0       	breq	.+24     	; 0x3f8 <setPort+0x1c>
 3e0:	83 34       	cpi	r24, 0x43	; 67
 3e2:	18 f4       	brcc	.+6      	; 0x3ea <setPort+0xe>
 3e4:	81 34       	cpi	r24, 0x41	; 65
 3e6:	69 f4       	brne	.+26     	; 0x402 <setPort+0x26>
 3e8:	05 c0       	rjmp	.+10     	; 0x3f4 <setPort+0x18>
 3ea:	83 34       	cpi	r24, 0x43	; 67
 3ec:	39 f0       	breq	.+14     	; 0x3fc <setPort+0x20>
 3ee:	84 34       	cpi	r24, 0x44	; 68
 3f0:	41 f4       	brne	.+16     	; 0x402 <setPort+0x26>
 3f2:	06 c0       	rjmp	.+12     	; 0x400 <setPort+0x24>
	{
		case 'A':
		PORTA = state;
 3f4:	6b bb       	out	0x1b, r22	; 27
 3f6:	08 95       	ret
		break;
		case 'B':
		PORTB = state;
 3f8:	68 bb       	out	0x18, r22	; 24
 3fa:	08 95       	ret
		break;
		case 'C':
		PORTC = state;
 3fc:	65 bb       	out	0x15, r22	; 21
 3fe:	08 95       	ret
		break;
		case 'D':
		PORTD = state;
 400:	62 bb       	out	0x12, r22	; 18
 402:	08 95       	ret

00000404 <getPin>:
	
}
int8_t getPin(const char port_name)
{
	int8_t x=0xbF0;
	switch(port_name)
 404:	82 34       	cpi	r24, 0x42	; 66
 406:	69 f0       	breq	.+26     	; 0x422 <getPin+0x1e>
 408:	83 34       	cpi	r24, 0x43	; 67
 40a:	18 f4       	brcc	.+6      	; 0x412 <getPin+0xe>
 40c:	81 34       	cpi	r24, 0x41	; 65
 40e:	29 f4       	brne	.+10     	; 0x41a <getPin+0x16>
 410:	06 c0       	rjmp	.+12     	; 0x41e <getPin+0x1a>
 412:	83 34       	cpi	r24, 0x43	; 67
 414:	41 f0       	breq	.+16     	; 0x426 <getPin+0x22>
 416:	84 34       	cpi	r24, 0x44	; 68
 418:	49 f0       	breq	.+18     	; 0x42c <getPin+0x28>
 41a:	80 ef       	ldi	r24, 0xF0	; 240
 41c:	08 95       	ret
	{
		case 'A':
		x = 0x0F & PINA;
 41e:	89 b3       	in	r24, 0x19	; 25
 420:	03 c0       	rjmp	.+6      	; 0x428 <getPin+0x24>
		break;
		case 'B':
		x = 0x0F & PINB;
 422:	86 b3       	in	r24, 0x16	; 22
 424:	01 c0       	rjmp	.+2      	; 0x428 <getPin+0x24>
		break;
		case 'C':
		x = 0x0F & PINC;
 426:	83 b3       	in	r24, 0x13	; 19
 428:	8f 70       	andi	r24, 0x0F	; 15
 42a:	08 95       	ret
		break;
		case 'D':
		x = 0x0F & PIND;
 42c:	80 b3       	in	r24, 0x10	; 16
 42e:	8f 70       	andi	r24, 0x0F	; 15
		break;
	}
	return x;
}
 430:	08 95       	ret

00000432 <translate>:



int8_t translate(int key_rcode){
		switch(key_rcode)
 432:	8b 30       	cpi	r24, 0x0B	; 11
 434:	91 05       	cpc	r25, r1
 436:	81 f0       	breq	.+32     	; 0x458 <translate+0x26>
 438:	8c 30       	cpi	r24, 0x0C	; 12
 43a:	91 05       	cpc	r25, r1
 43c:	1c f4       	brge	.+6      	; 0x444 <translate+0x12>
 43e:	07 97       	sbiw	r24, 0x07	; 7
 440:	79 f4       	brne	.+30     	; 0x460 <translate+0x2e>
 442:	0c c0       	rjmp	.+24     	; 0x45c <translate+0x2a>
 444:	8d 30       	cpi	r24, 0x0D	; 13
 446:	91 05       	cpc	r25, r1
 448:	19 f0       	breq	.+6      	; 0x450 <translate+0x1e>
 44a:	0e 97       	sbiw	r24, 0x0e	; 14
 44c:	49 f4       	brne	.+18     	; 0x460 <translate+0x2e>
 44e:	02 c0       	rjmp	.+4      	; 0x454 <translate+0x22>
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	08 95       	ret
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	08 95       	ret
 458:	83 e0       	ldi	r24, 0x03	; 3
 45a:	08 95       	ret
		break;
		case 0b00001101:
			return 2;
			break;
		case 0b00001011:
			return 3;
 45c:	84 e0       	ldi	r24, 0x04	; 4
 45e:	08 95       	ret
			break;
		case 0b00000111:
			return 4;
 460:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			return 0;
				}
}
 462:	08 95       	ret

00000464 <get_key>:
}



int8_t get_key(const char type, const char port_name) 
{
 464:	cf 92       	push	r12
 466:	df 92       	push	r13
 468:	ef 92       	push	r14
 46a:	ff 92       	push	r15
 46c:	0f 93       	push	r16
 46e:	1f 93       	push	r17
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
 474:	06 2f       	mov	r16, r22
	int8_t temp, row = 0,ret_key_index_number = 0, state,h_port,l_port;
	if(type == 'M' | type =='m'){
 476:	8d 34       	cpi	r24, 0x4D	; 77
 478:	11 f0       	breq	.+4      	; 0x47e <get_key+0x1a>
 47a:	8d 36       	cpi	r24, 0x6D	; 109
 47c:	91 f4       	brne	.+36     	; 0x4a2 <get_key+0x3e>
		state = ~(1<<4); //wstawiamy to zero krocz?ce, w zasadzie to w tym przypadku nie kroczace
		setPort(port_name, state);
 47e:	80 2f       	mov	r24, r16
 480:	6f ee       	ldi	r22, 0xEF	; 239
 482:	0e 94 ee 01 	call	0x3dc	; 0x3dc <setPort>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 486:	80 ea       	ldi	r24, 0xA0	; 160
 488:	9f e0       	ldi	r25, 0x0F	; 15
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <get_key+0x26>
		_delay_ms(10);
		temp = getPin(port_name);
 48e:	80 2f       	mov	r24, r16
 490:	0e 94 02 02 	call	0x404	; 0x404 <getPin>

			return translate(temp);
 494:	99 27       	eor	r25, r25
 496:	87 fd       	sbrc	r24, 7
 498:	90 95       	com	r25
 49a:	0e 94 19 02 	call	0x432	; 0x432 <translate>
 49e:	18 2f       	mov	r17, r24
 4a0:	37 c0       	rjmp	.+110    	; 0x510 <get_key+0xac>
		
	}
	
	if(type == 'D' | type =='d')
 4a2:	84 34       	cpi	r24, 0x44	; 68
 4a4:	21 f0       	breq	.+8      	; 0x4ae <get_key+0x4a>
 4a6:	84 36       	cpi	r24, 0x64	; 100
 4a8:	11 f0       	breq	.+4      	; 0x4ae <get_key+0x4a>
 4aa:	10 e0       	ldi	r17, 0x00	; 0
 4ac:	31 c0       	rjmp	.+98     	; 0x510 <get_key+0xac>
 4ae:	10 e0       	ldi	r17, 0x00	; 0
 4b0:	c4 e0       	ldi	r28, 0x04	; 4
 4b2:	d0 e0       	ldi	r29, 0x00	; 0
		Tutaj w zasadzie idac za tym pomyslem az sie prosi to skumulowac do 4 bitow w ukladzie 0x_ _ _ _ W W K K i miec 4 bity wolne, ale to tylko dywagacja
					*/
			for(int col=4; col<8; col++) // column
			{
				state = ~(1<<col);
				setPort(port_name, state);
 4b4:	41 e0       	ldi	r20, 0x01	; 1
 4b6:	c4 2e       	mov	r12, r20
 4b8:	d1 2c       	mov	r13, r1
 4ba:	30 ea       	ldi	r19, 0xA0	; 160
 4bc:	e3 2e       	mov	r14, r19
 4be:	3f e0       	ldi	r19, 0x0F	; 15
 4c0:	f3 2e       	mov	r15, r19
 4c2:	b6 01       	movw	r22, r12
 4c4:	0c 2e       	mov	r0, r28
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <get_key+0x68>
 4c8:	66 0f       	add	r22, r22
 4ca:	77 1f       	adc	r23, r23
 4cc:	0a 94       	dec	r0
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <get_key+0x64>
 4d0:	60 95       	com	r22
 4d2:	80 2f       	mov	r24, r16
 4d4:	0e 94 ee 01 	call	0x3dc	; 0x3dc <setPort>
 4d8:	c7 01       	movw	r24, r14
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <get_key+0x76>
				_delay_ms(10);
				temp = getPin(port_name);
 4de:	80 2f       	mov	r24, r16
 4e0:	0e 94 02 02 	call	0x404	; 0x404 <getPin>
				row = translate(temp);
 4e4:	99 27       	eor	r25, r25
 4e6:	87 fd       	sbrc	r24, 7
 4e8:	90 95       	com	r25
 4ea:	0e 94 19 02 	call	0x432	; 0x432 <translate>
				if(row != 0)
 4ee:	88 23       	and	r24, r24
 4f0:	59 f0       	breq	.+22     	; 0x508 <get_key+0xa4>
					ret_key_index_number = (row-1)*4 + col - 3;
 4f2:	99 27       	eor	r25, r25
 4f4:	87 fd       	sbrc	r24, 7
 4f6:	90 95       	com	r25
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	18 2f       	mov	r17, r24
 504:	13 50       	subi	r17, 0x03	; 3
 506:	1c 0f       	add	r17, r28
		
		l_port = getPin(port_name) & 0x0F;
		h_port = getPin(port_name) &0xF0;
		Tutaj w zasadzie idac za tym pomyslem az sie prosi to skumulowac do 4 bitow w ukladzie 0x_ _ _ _ W W K K i miec 4 bity wolne, ale to tylko dywagacja
					*/
			for(int col=4; col<8; col++) // column
 508:	21 96       	adiw	r28, 0x01	; 1
 50a:	c8 30       	cpi	r28, 0x08	; 8
 50c:	d1 05       	cpc	r29, r1
 50e:	c9 f6       	brne	.-78     	; 0x4c2 <get_key+0x5e>
			return ret_key_index_number;
		
		
		
	
}//koniec getKey
 510:	81 2f       	mov	r24, r17
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	1f 91       	pop	r17
 518:	0f 91       	pop	r16
 51a:	ff 90       	pop	r15
 51c:	ef 90       	pop	r14
 51e:	df 90       	pop	r13
 520:	cf 90       	pop	r12
 522:	08 95       	ret

00000524 <setDDR>:
#include "lcd_lib.h"
#include <string.h>

// Helper function to set the DDR register for the specified port
void setDDR(LCD *lcd, char port) {
 524:	fc 01       	movw	r30, r24
    switch (port) {
 526:	62 34       	cpi	r22, 0x42	; 66
 528:	89 f0       	breq	.+34     	; 0x54c <setDDR+0x28>
 52a:	63 34       	cpi	r22, 0x43	; 67
 52c:	18 f4       	brcc	.+6      	; 0x534 <setDDR+0x10>
 52e:	61 34       	cpi	r22, 0x41	; 65
 530:	19 f5       	brne	.+70     	; 0x578 <setDDR+0x54>
 532:	05 c0       	rjmp	.+10     	; 0x53e <setDDR+0x1a>
 534:	63 34       	cpi	r22, 0x43	; 67
 536:	89 f0       	breq	.+34     	; 0x55a <setDDR+0x36>
 538:	64 34       	cpi	r22, 0x44	; 68
 53a:	f1 f4       	brne	.+60     	; 0x578 <setDDR+0x54>
 53c:	15 c0       	rjmp	.+42     	; 0x568 <setDDR+0x44>
        case 'A': lcd->ddr = &DDRA; lcd->port = &PORTA; break;
 53e:	8a e3       	ldi	r24, 0x3A	; 58
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	91 83       	std	Z+1, r25	; 0x01
 544:	80 83       	st	Z, r24
 546:	8b e3       	ldi	r24, 0x3B	; 59
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	14 c0       	rjmp	.+40     	; 0x574 <setDDR+0x50>
        case 'B': lcd->ddr = &DDRB; lcd->port = &PORTB; break;
 54c:	87 e3       	ldi	r24, 0x37	; 55
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	91 83       	std	Z+1, r25	; 0x01
 552:	80 83       	st	Z, r24
 554:	88 e3       	ldi	r24, 0x38	; 56
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0d c0       	rjmp	.+26     	; 0x574 <setDDR+0x50>
		case 'C': lcd->ddr = &DDRC; lcd->port = &PORTC; break;
 55a:	84 e3       	ldi	r24, 0x34	; 52
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	91 83       	std	Z+1, r25	; 0x01
 560:	80 83       	st	Z, r24
 562:	85 e3       	ldi	r24, 0x35	; 53
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	06 c0       	rjmp	.+12     	; 0x574 <setDDR+0x50>
		case 'D': lcd->ddr = &DDRD; lcd->port = &PORTD; break;
 568:	81 e3       	ldi	r24, 0x31	; 49
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	91 83       	std	Z+1, r25	; 0x01
 56e:	80 83       	st	Z, r24
 570:	82 e3       	ldi	r24, 0x32	; 50
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	93 83       	std	Z+3, r25	; 0x03
 576:	82 83       	std	Z+2, r24	; 0x02
    }
    *(lcd->ddr) = 0xFF; // Set as output
 578:	01 90       	ld	r0, Z+
 57a:	f0 81       	ld	r31, Z
 57c:	e0 2d       	mov	r30, r0
 57e:	8f ef       	ldi	r24, 0xFF	; 255
 580:	80 83       	st	Z, r24
}
 582:	08 95       	ret

00000584 <LCD_send4BitCommand>:

// Function to send a 4-bit command to the LCD
void LCD_send4BitCommand(LCD *lcd, char command) {
 584:	dc 01       	movw	r26, r24
    *(lcd->port) |= _BV(LCD_E); // Enable high
 586:	12 96       	adiw	r26, 0x02	; 2
 588:	ed 91       	ld	r30, X+
 58a:	fc 91       	ld	r31, X
 58c:	13 97       	sbiw	r26, 0x03	; 3
 58e:	80 81       	ld	r24, Z
 590:	81 60       	ori	r24, 0x01	; 1
 592:	80 83       	st	Z, r24
    // Send high nibble
    *(lcd->port) = (*(lcd->port) & 0x0F) | (command & 0xF0);
 594:	12 96       	adiw	r26, 0x02	; 2
 596:	ed 91       	ld	r30, X+
 598:	fc 91       	ld	r31, X
 59a:	13 97       	sbiw	r26, 0x03	; 3
 59c:	80 81       	ld	r24, Z
 59e:	60 7f       	andi	r22, 0xF0	; 240
 5a0:	8f 70       	andi	r24, 0x0F	; 15
 5a2:	86 2b       	or	r24, r22
 5a4:	80 83       	st	Z, r24
    *(lcd->port) &= ~_BV(LCD_E); // Enable low
 5a6:	12 96       	adiw	r26, 0x02	; 2
 5a8:	ed 91       	ld	r30, X+
 5aa:	fc 91       	ld	r31, X
 5ac:	13 97       	sbiw	r26, 0x03	; 3
 5ae:	80 81       	ld	r24, Z
 5b0:	8e 7f       	andi	r24, 0xFE	; 254
 5b2:	80 83       	st	Z, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	8a 95       	dec	r24
 5b8:	f1 f7       	brne	.-4      	; 0x5b6 <LCD_send4BitCommand+0x32>
    _delay_us(1);
}
 5ba:	08 95       	ret

000005bc <LCD_writeCharacter>:
    for (uint8_t i = x; i < 16; i++) {
        LCD_writeCharacter(lcd, ' ');
    }
}

void LCD_writeCharacter(LCD *lcd, char c) {
 5bc:	ff 92       	push	r15
 5be:	0f 93       	push	r16
 5c0:	1f 93       	push	r17
 5c2:	8c 01       	movw	r16, r24
 5c4:	f6 2e       	mov	r15, r22
    *(lcd->port) |= _BV(LCD_RS); // RS high for data
 5c6:	dc 01       	movw	r26, r24
 5c8:	12 96       	adiw	r26, 0x02	; 2
 5ca:	ed 91       	ld	r30, X+
 5cc:	fc 91       	ld	r31, X
 5ce:	13 97       	sbiw	r26, 0x03	; 3
 5d0:	80 81       	ld	r24, Z
 5d2:	82 60       	ori	r24, 0x02	; 2
 5d4:	80 83       	st	Z, r24
    LCD_send4BitCommand(lcd, c & 0xF0); // Send high nibble
 5d6:	60 7f       	andi	r22, 0xF0	; 240
 5d8:	c8 01       	movw	r24, r16
 5da:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_send4BitCommand>
    LCD_send4BitCommand(lcd, c << 4); // Send low nibble
 5de:	f2 94       	swap	r15
 5e0:	80 ef       	ldi	r24, 0xF0	; 240
 5e2:	f8 22       	and	r15, r24
 5e4:	c8 01       	movw	r24, r16
 5e6:	6f 2d       	mov	r22, r15
 5e8:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_send4BitCommand>
 5ec:	8d e0       	ldi	r24, 0x0D	; 13
 5ee:	8a 95       	dec	r24
 5f0:	f1 f7       	brne	.-4      	; 0x5ee <LCD_writeCharacter+0x32>
    _delay_us(40);
}
 5f2:	1f 91       	pop	r17
 5f4:	0f 91       	pop	r16
 5f6:	ff 90       	pop	r15
 5f8:	08 95       	ret

000005fa <LCD_sendInstruction>:
void LCD_setCoursor(LCD *lcd, uint8_t x, uint8_t y) {
    uint8_t address = (y * 0x40 + x) | 0x80;
    LCD_sendInstruction(lcd, address);
}

void LCD_sendInstruction(LCD *lcd, uint8_t cmd) {
 5fa:	ff 92       	push	r15
 5fc:	0f 93       	push	r16
 5fe:	1f 93       	push	r17
 600:	8c 01       	movw	r16, r24
 602:	f6 2e       	mov	r15, r22
    *(lcd->port) &= ~_BV(LCD_RS); // RS low for instruction
 604:	dc 01       	movw	r26, r24
 606:	12 96       	adiw	r26, 0x02	; 2
 608:	ed 91       	ld	r30, X+
 60a:	fc 91       	ld	r31, X
 60c:	13 97       	sbiw	r26, 0x03	; 3
 60e:	80 81       	ld	r24, Z
 610:	8d 7f       	andi	r24, 0xFD	; 253
 612:	80 83       	st	Z, r24
    LCD_send4BitCommand(lcd, cmd & 0xF0); // Send high nibble
 614:	60 7f       	andi	r22, 0xF0	; 240
 616:	c8 01       	movw	r24, r16
 618:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_send4BitCommand>
    LCD_send4BitCommand(lcd, cmd << 4); // Send low nibble
 61c:	f2 94       	swap	r15
 61e:	90 ef       	ldi	r25, 0xF0	; 240
 620:	f9 22       	and	r15, r25
 622:	c8 01       	movw	r24, r16
 624:	6f 2d       	mov	r22, r15
 626:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_send4BitCommand>
 62a:	8d e0       	ldi	r24, 0x0D	; 13
 62c:	8a 95       	dec	r24
 62e:	f1 f7       	brne	.-4      	; 0x62c <LCD_sendInstruction+0x32>
    _delay_us(40);
}
 630:	1f 91       	pop	r17
 632:	0f 91       	pop	r16
 634:	ff 90       	pop	r15
 636:	08 95       	ret

00000638 <LCD_setCoursor>:
    }
}

void LCD_setCoursor(LCD *lcd, uint8_t x, uint8_t y) {
    uint8_t address = (y * 0x40 + x) | 0x80;
    LCD_sendInstruction(lcd, address);
 638:	42 95       	swap	r20
 63a:	44 0f       	add	r20, r20
 63c:	44 0f       	add	r20, r20
 63e:	40 7c       	andi	r20, 0xC0	; 192
 640:	46 0f       	add	r20, r22
 642:	40 68       	ori	r20, 0x80	; 128
 644:	64 2f       	mov	r22, r20
 646:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LCD_sendInstruction>
}
 64a:	08 95       	ret

0000064c <LCD_clearFromPoint>:
void LCD_clear(LCD *lcd) {
    LCD_sendInstruction(lcd, 0x01); // Clear display command
    _delay_ms(2); // Clearing delay
}

void LCD_clearFromPoint(LCD *lcd, uint8_t x, uint8_t y) {
 64c:	1f 93       	push	r17
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
 652:	ec 01       	movw	r28, r24
 654:	16 2f       	mov	r17, r22
    LCD_setCoursor(lcd, x, y);
 656:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_setCoursor>
 65a:	05 c0       	rjmp	.+10     	; 0x666 <LCD_clearFromPoint+0x1a>
    for (uint8_t i = x; i < 16; i++) {
        LCD_writeCharacter(lcd, ' ');
 65c:	ce 01       	movw	r24, r28
 65e:	60 e2       	ldi	r22, 0x20	; 32
 660:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_writeCharacter>
    _delay_ms(2); // Clearing delay
}

void LCD_clearFromPoint(LCD *lcd, uint8_t x, uint8_t y) {
    LCD_setCoursor(lcd, x, y);
    for (uint8_t i = x; i < 16; i++) {
 664:	1f 5f       	subi	r17, 0xFF	; 255
 666:	10 31       	cpi	r17, 0x10	; 16
 668:	c8 f3       	brcs	.-14     	; 0x65c <LCD_clearFromPoint+0x10>
        LCD_writeCharacter(lcd, ' ');
    }
}
 66a:	df 91       	pop	r29
 66c:	cf 91       	pop	r28
 66e:	1f 91       	pop	r17
 670:	08 95       	ret

00000672 <LCD_writeText>:
    LCD_send4BitCommand(lcd, c & 0xF0); // Send high nibble
    LCD_send4BitCommand(lcd, c << 4); // Send low nibble
    _delay_us(40);
}

void LCD_writeText(LCD *lcd, char *text) {
 672:	cf 92       	push	r12
 674:	df 92       	push	r13
 676:	ef 92       	push	r14
 678:	ff 92       	push	r15
 67a:	1f 93       	push	r17
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	7c 01       	movw	r14, r24
 682:	6b 01       	movw	r12, r22
 684:	10 e0       	ldi	r17, 0x00	; 0
 686:	0b c0       	rjmp	.+22     	; 0x69e <LCD_writeText+0x2c>
    for (uint8_t i = 0; text[i] != '\0'; i++) {
        if (i == 16) LCD_sendInstruction(lcd, 0xC0); // Move to next line
 688:	10 31       	cpi	r17, 0x10	; 16
 68a:	21 f4       	brne	.+8      	; 0x694 <LCD_writeText+0x22>
 68c:	c7 01       	movw	r24, r14
 68e:	60 ec       	ldi	r22, 0xC0	; 192
 690:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LCD_sendInstruction>
        LCD_writeCharacter(lcd, text[i]);
 694:	c7 01       	movw	r24, r14
 696:	68 81       	ld	r22, Y
 698:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_writeCharacter>
    LCD_send4BitCommand(lcd, c << 4); // Send low nibble
    _delay_us(40);
}

void LCD_writeText(LCD *lcd, char *text) {
    for (uint8_t i = 0; text[i] != '\0'; i++) {
 69c:	1f 5f       	subi	r17, 0xFF	; 255
 69e:	e6 01       	movw	r28, r12
 6a0:	c1 0f       	add	r28, r17
 6a2:	d1 1d       	adc	r29, r1
 6a4:	88 81       	ld	r24, Y
 6a6:	88 23       	and	r24, r24
 6a8:	79 f7       	brne	.-34     	; 0x688 <LCD_writeText+0x16>
        if (i == 16) LCD_sendInstruction(lcd, 0xC0); // Move to next line
        LCD_writeCharacter(lcd, text[i]);
    }
}
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	1f 91       	pop	r17
 6b0:	ff 90       	pop	r15
 6b2:	ef 90       	pop	r14
 6b4:	df 90       	pop	r13
 6b6:	cf 90       	pop	r12
 6b8:	08 95       	ret

000006ba <LCD_clear>:
    LCD_clear(lcd); // Clear Display
    LCD_sendInstruction(lcd, 0x06); // Entry Mode: Increment cursor, No shift
}

void LCD_clear(LCD *lcd) {
    LCD_sendInstruction(lcd, 0x01); // Clear display command
 6ba:	61 e0       	ldi	r22, 0x01	; 1
 6bc:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LCD_sendInstruction>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 6c0:	84 ef       	ldi	r24, 0xF4	; 244
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	01 97       	sbiw	r24, 0x01	; 1
 6c6:	f1 f7       	brne	.-4      	; 0x6c4 <LCD_clear+0xa>
    _delay_ms(2); // Clearing delay
}
 6c8:	08 95       	ret

000006ca <LCD_init>:
    *(lcd->port) = (*(lcd->port) & 0x0F) | (command & 0xF0);
    *(lcd->port) &= ~_BV(LCD_E); // Enable low
    _delay_us(1);
}

void LCD_init(LCD *lcd, char port) {
 6ca:	ff 92       	push	r15
 6cc:	0f 93       	push	r16
 6ce:	1f 93       	push	r17
 6d0:	8c 01       	movw	r16, r24
    setDDR(lcd, port);
 6d2:	0e 94 92 02 	call	0x524	; 0x524 <setDDR>
 6d6:	88 e8       	ldi	r24, 0x88	; 136
 6d8:	93 e1       	ldi	r25, 0x13	; 19
 6da:	01 97       	sbiw	r24, 0x01	; 1
 6dc:	f1 f7       	brne	.-4      	; 0x6da <LCD_init+0x10>
    _delay_ms(20); // Wait for more than 15ms after VCC rises to 4.5V

    // Set to 4-bit mode
    LCD_send4BitCommand(lcd, 0x30);
 6de:	c8 01       	movw	r24, r16
 6e0:	60 e3       	ldi	r22, 0x30	; 48
 6e2:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_send4BitCommand>
 6e6:	82 ee       	ldi	r24, 0xE2	; 226
 6e8:	94 e0       	ldi	r25, 0x04	; 4
 6ea:	01 97       	sbiw	r24, 0x01	; 1
 6ec:	f1 f7       	brne	.-4      	; 0x6ea <LCD_init+0x20>
    _delay_ms(5);
    LCD_send4BitCommand(lcd, 0x30);
 6ee:	c8 01       	movw	r24, r16
 6f0:	60 e3       	ldi	r22, 0x30	; 48
 6f2:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_send4BitCommand>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 6f6:	21 e2       	ldi	r18, 0x21	; 33
 6f8:	f2 2e       	mov	r15, r18
 6fa:	8f 2d       	mov	r24, r15
 6fc:	8a 95       	dec	r24
 6fe:	f1 f7       	brne	.-4      	; 0x6fc <LCD_init+0x32>
    _delay_us(100);
    LCD_send4BitCommand(lcd, 0x30);
 700:	c8 01       	movw	r24, r16
 702:	60 e3       	ldi	r22, 0x30	; 48
 704:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_send4BitCommand>
 708:	8f 2d       	mov	r24, r15
 70a:	8a 95       	dec	r24
 70c:	f1 f7       	brne	.-4      	; 0x70a <LCD_init+0x40>
    _delay_us(100);
    LCD_send4BitCommand(lcd, 0x20);
 70e:	c8 01       	movw	r24, r16
 710:	60 e2       	ldi	r22, 0x20	; 32
 712:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_send4BitCommand>
 716:	fa 94       	dec	r15
 718:	f1 f7       	brne	.-4      	; 0x716 <LCD_init+0x4c>
    _delay_us(100);

    LCD_sendInstruction(lcd, 0x28); // Function Set: 4-bit, 2 Line, 5x8 dots
 71a:	c8 01       	movw	r24, r16
 71c:	68 e2       	ldi	r22, 0x28	; 40
 71e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LCD_sendInstruction>
    LCD_sendInstruction(lcd, 0x0C); // Display ON, Cursor OFF, Blink OFF
 722:	c8 01       	movw	r24, r16
 724:	6c e0       	ldi	r22, 0x0C	; 12
 726:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LCD_sendInstruction>
    LCD_clear(lcd); // Clear Display
 72a:	c8 01       	movw	r24, r16
 72c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <LCD_clear>
    LCD_sendInstruction(lcd, 0x06); // Entry Mode: Increment cursor, No shift
 730:	c8 01       	movw	r24, r16
 732:	66 e0       	ldi	r22, 0x06	; 6
 734:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LCD_sendInstruction>
}
 738:	1f 91       	pop	r17
 73a:	0f 91       	pop	r16
 73c:	ff 90       	pop	r15
 73e:	08 95       	ret

00000740 <menu_init>:
#include <string.h>


Menu menus[MAX_MENUS];

void menu_init(Menu *menu, uint8_t id, LCD *lcd, Menu *parentMenu) {
 740:	fc 01       	movw	r30, r24
    menu->id = id;
 742:	60 83       	st	Z, r22
    menu->itemCount = 0;
 744:	e1 54       	subi	r30, 0x41	; 65
 746:	ff 4f       	sbci	r31, 0xFF	; 255
 748:	11 92       	st	Z+, r1
    menu->current = 0;
 74a:	11 92       	st	Z+, r1
    menu->lcd = lcd;
 74c:	41 93       	st	Z+, r20
 74e:	51 93       	st	Z+, r21
	menu->parentMenu = parentMenu;
 750:	31 83       	std	Z+1, r19	; 0x01
 752:	20 83       	st	Z, r18
 754:	e3 5c       	subi	r30, 0xC3	; 195
 756:	f0 40       	sbci	r31, 0x00	; 0
    menus[id] = *menu; // Store the menu in the global array
 758:	70 e0       	ldi	r23, 0x00	; 0
 75a:	85 ec       	ldi	r24, 0xC5	; 197
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	68 9f       	mul	r22, r24
 760:	d0 01       	movw	r26, r0
 762:	69 9f       	mul	r22, r25
 764:	b0 0d       	add	r27, r0
 766:	78 9f       	mul	r23, r24
 768:	b0 0d       	add	r27, r0
 76a:	11 24       	eor	r1, r1
 76c:	a5 5e       	subi	r26, 0xE5	; 229
 76e:	ba 4f       	sbci	r27, 0xFA	; 250
 770:	85 ec       	ldi	r24, 0xC5	; 197
 772:	01 90       	ld	r0, Z+
 774:	0d 92       	st	X+, r0
 776:	81 50       	subi	r24, 0x01	; 1
 778:	e1 f7       	brne	.-8      	; 0x772 <menu_init+0x32>
}
 77a:	08 95       	ret

0000077c <menu_display>:
        menu->itemCount++;
    }
}


void menu_display(Menu *menu) {
 77c:	af 92       	push	r10
 77e:	bf 92       	push	r11
 780:	cf 92       	push	r12
 782:	df 92       	push	r13
 784:	ef 92       	push	r14
 786:	ff 92       	push	r15
 788:	0f 93       	push	r16
 78a:	1f 93       	push	r17
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
 790:	ec 01       	movw	r28, r24
    LCD_clear(menu->lcd);
 792:	cf 53       	subi	r28, 0x3F	; 63
 794:	df 4f       	sbci	r29, 0xFF	; 255
 796:	88 81       	ld	r24, Y
 798:	99 81       	ldd	r25, Y+1	; 0x01
 79a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <LCD_clear>
    uint8_t start = menu->current;
 79e:	4a 91       	ld	r20, -Y
    uint8_t end = start + 1 < menu->itemCount ? start + 1 : start;
 7a0:	24 2f       	mov	r18, r20
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	2f 5f       	subi	r18, 0xFF	; 255
 7a6:	3f 4f       	sbci	r19, 0xFF	; 255
 7a8:	8a 91       	ld	r24, -Y
 7aa:	cf 5b       	subi	r28, 0xBF	; 191
 7ac:	d0 40       	sbci	r29, 0x00	; 0
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	28 17       	cp	r18, r24
 7b2:	39 07       	cpc	r19, r25
 7b4:	14 f0       	brlt	.+4      	; 0x7ba <menu_display+0x3e>
 7b6:	b4 2e       	mov	r11, r20
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <menu_display+0x42>
 7ba:	b4 2e       	mov	r11, r20
 7bc:	b3 94       	inc	r11
 7be:	f4 2e       	mov	r15, r20
 7c0:	ee 24       	eor	r14, r14

    for (uint8_t i = start; i <= end; i++) {
        LCD_setCoursor(menu->lcd, 0, i - start);
 7c2:	8e 01       	movw	r16, r28
 7c4:	0f 53       	subi	r16, 0x3F	; 63
 7c6:	1f 4f       	sbci	r17, 0xFF	; 255
        if (i == menu->current) {
 7c8:	90 ec       	ldi	r25, 0xC0	; 192
 7ca:	c9 2e       	mov	r12, r25
 7cc:	d1 2c       	mov	r13, r1
 7ce:	cc 0e       	add	r12, r28
 7d0:	dd 1e       	adc	r13, r29
            LCD_writeCharacter(menu->lcd, '>');
        }
        LCD_writeText(menu->lcd, menu->items[i].text);
 7d2:	83 e1       	ldi	r24, 0x13	; 19
 7d4:	a8 2e       	mov	r10, r24
 7d6:	1f c0       	rjmp	.+62     	; 0x816 <menu_display+0x9a>
    LCD_clear(menu->lcd);
    uint8_t start = menu->current;
    uint8_t end = start + 1 < menu->itemCount ? start + 1 : start;

    for (uint8_t i = start; i <= end; i++) {
        LCD_setCoursor(menu->lcd, 0, i - start);
 7d8:	f8 01       	movw	r30, r16
 7da:	80 81       	ld	r24, Z
 7dc:	91 81       	ldd	r25, Z+1	; 0x01
 7de:	60 e0       	ldi	r22, 0x00	; 0
 7e0:	4e 2d       	mov	r20, r14
 7e2:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_setCoursor>
        if (i == menu->current) {
 7e6:	f6 01       	movw	r30, r12
 7e8:	80 81       	ld	r24, Z
 7ea:	f8 16       	cp	r15, r24
 7ec:	31 f4       	brne	.+12     	; 0x7fa <menu_display+0x7e>
            LCD_writeCharacter(menu->lcd, '>');
 7ee:	f8 01       	movw	r30, r16
 7f0:	80 81       	ld	r24, Z
 7f2:	91 81       	ldd	r25, Z+1	; 0x01
 7f4:	6e e3       	ldi	r22, 0x3E	; 62
 7f6:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_writeCharacter>
        }
        LCD_writeText(menu->lcd, menu->items[i].text);
 7fa:	fa 9c       	mul	r15, r10
 7fc:	b0 01       	movw	r22, r0
 7fe:	11 24       	eor	r1, r1
 800:	6f 5f       	subi	r22, 0xFF	; 255
 802:	7f 4f       	sbci	r23, 0xFF	; 255
 804:	6c 0f       	add	r22, r28
 806:	7d 1f       	adc	r23, r29
 808:	f8 01       	movw	r30, r16
 80a:	80 81       	ld	r24, Z
 80c:	91 81       	ldd	r25, Z+1	; 0x01
 80e:	0e 94 39 03 	call	0x672	; 0x672 <LCD_writeText>
void menu_display(Menu *menu) {
    LCD_clear(menu->lcd);
    uint8_t start = menu->current;
    uint8_t end = start + 1 < menu->itemCount ? start + 1 : start;

    for (uint8_t i = start; i <= end; i++) {
 812:	f3 94       	inc	r15
 814:	e3 94       	inc	r14
 816:	bf 14       	cp	r11, r15
 818:	f8 f6       	brcc	.-66     	; 0x7d8 <menu_display+0x5c>
        if (i == menu->current) {
            LCD_writeCharacter(menu->lcd, '>');
        }
        LCD_writeText(menu->lcd, menu->items[i].text);
    }
}
 81a:	df 91       	pop	r29
 81c:	cf 91       	pop	r28
 81e:	1f 91       	pop	r17
 820:	0f 91       	pop	r16
 822:	ff 90       	pop	r15
 824:	ef 90       	pop	r14
 826:	df 90       	pop	r13
 828:	cf 90       	pop	r12
 82a:	bf 90       	pop	r11
 82c:	af 90       	pop	r10
 82e:	08 95       	ret

00000830 <menu_goto>:
        menu_display(menu->parentMenu);
    }
}

void menu_goto(Menu *currentMenu, uint8_t targetMenuId) {
    if (targetMenuId < MAX_MENUS && &menus[targetMenuId] != NULL) {
 830:	65 30       	cpi	r22, 0x05	; 5
 832:	48 f4       	brcc	.+18     	; 0x846 <menu_goto+0x16>
 834:	85 ec       	ldi	r24, 0xC5	; 197
 836:	68 9f       	mul	r22, r24
 838:	c0 01       	movw	r24, r0
 83a:	11 24       	eor	r1, r1
 83c:	85 5e       	subi	r24, 0xE5	; 229
 83e:	9a 4f       	sbci	r25, 0xFA	; 250
 840:	11 f0       	breq	.+4      	; 0x846 <menu_goto+0x16>
        menu_display(&menus[targetMenuId]);
 842:	0e 94 be 03 	call	0x77c	; 0x77c <menu_display>
 846:	08 95       	ret

00000848 <menu_return>:




void menu_return(Menu *menu) {
    if (menu->parentMenu) {
 848:	fc 01       	movw	r30, r24
 84a:	ed 53       	subi	r30, 0x3D	; 61
 84c:	ff 4f       	sbci	r31, 0xFF	; 255
 84e:	80 81       	ld	r24, Z
 850:	91 81       	ldd	r25, Z+1	; 0x01
 852:	00 97       	sbiw	r24, 0x00	; 0
 854:	11 f0       	breq	.+4      	; 0x85a <menu_return+0x12>
        menu_display(menu->parentMenu);
 856:	0e 94 be 03 	call	0x77c	; 0x77c <menu_display>
 85a:	08 95       	ret

0000085c <menu_selectItem>:
    }
}



void menu_selectItem(Menu *menu) {
 85c:	cf 93       	push	r28
 85e:	df 93       	push	r29
 860:	ec 01       	movw	r28, r24
    if (menu->items[menu->current].action) {
 862:	c0 54       	subi	r28, 0x40	; 64
 864:	df 4f       	sbci	r29, 0xFF	; 255
 866:	88 81       	ld	r24, Y
 868:	c0 5c       	subi	r28, 0xC0	; 192
 86a:	d0 40       	sbci	r29, 0x00	; 0
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	23 e1       	ldi	r18, 0x13	; 19
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	82 9f       	mul	r24, r18
 874:	f0 01       	movw	r30, r0
 876:	83 9f       	mul	r24, r19
 878:	f0 0d       	add	r31, r0
 87a:	92 9f       	mul	r25, r18
 87c:	f0 0d       	add	r31, r0
 87e:	11 24       	eor	r1, r1
 880:	ec 0f       	add	r30, r28
 882:	fd 1f       	adc	r31, r29
 884:	02 88       	ldd	r0, Z+18	; 0x12
 886:	f3 89       	ldd	r31, Z+19	; 0x13
 888:	e0 2d       	mov	r30, r0
 88a:	30 97       	sbiw	r30, 0x00	; 0
 88c:	29 f0       	breq	.+10     	; 0x898 <__stack+0x39>
        menu->items[menu->current].action(menu);
 88e:	ce 01       	movw	r24, r28
 890:	09 95       	icall
		menu_display(menu);
 892:	ce 01       	movw	r24, r28
 894:	0e 94 be 03 	call	0x77c	; 0x77c <menu_display>
    }
}
 898:	df 91       	pop	r29
 89a:	cf 91       	pop	r28
 89c:	08 95       	ret

0000089e <menu_prevItem>:
        menu_display(menu);
    }
}

void menu_prevItem(Menu *menu) {
    if (menu->current > 0) {
 89e:	fc 01       	movw	r30, r24
 8a0:	e0 54       	subi	r30, 0x40	; 64
 8a2:	ff 4f       	sbci	r31, 0xFF	; 255
 8a4:	20 81       	ld	r18, Z
 8a6:	22 23       	and	r18, r18
 8a8:	21 f0       	breq	.+8      	; 0x8b2 <menu_prevItem+0x14>
        menu->current--;
 8aa:	21 50       	subi	r18, 0x01	; 1
 8ac:	20 83       	st	Z, r18
        menu_display(menu);
 8ae:	0e 94 be 03 	call	0x77c	; 0x77c <menu_display>
 8b2:	08 95       	ret

000008b4 <menu_nextItem>:
        }
        LCD_writeText(menu->lcd, menu->items[i].text);
    }
}

void menu_nextItem(Menu *menu) {
 8b4:	fc 01       	movw	r30, r24
    if (menu->current < menu->itemCount - 1) {
 8b6:	dc 01       	movw	r26, r24
 8b8:	a0 54       	subi	r26, 0x40	; 64
 8ba:	bf 4f       	sbci	r27, 0xFF	; 255
 8bc:	4c 91       	ld	r20, X
 8be:	24 2f       	mov	r18, r20
 8c0:	30 e0       	ldi	r19, 0x00	; 0
 8c2:	e1 54       	subi	r30, 0x41	; 65
 8c4:	ff 4f       	sbci	r31, 0xFF	; 255
 8c6:	80 81       	ld	r24, Z
 8c8:	ef 5b       	subi	r30, 0xBF	; 191
 8ca:	f0 40       	sbci	r31, 0x00	; 0
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	01 97       	sbiw	r24, 0x01	; 1
 8d0:	28 17       	cp	r18, r24
 8d2:	39 07       	cpc	r19, r25
 8d4:	2c f4       	brge	.+10     	; 0x8e0 <menu_nextItem+0x2c>
        menu->current++;
 8d6:	4f 5f       	subi	r20, 0xFF	; 255
 8d8:	4c 93       	st	X, r20
        menu_display(menu);
 8da:	cf 01       	movw	r24, r30
 8dc:	0e 94 be 03 	call	0x77c	; 0x77c <menu_display>
 8e0:	08 95       	ret

000008e2 <menu_addItem>:
	menu->parentMenu = parentMenu;
    menus[id] = *menu; // Store the menu in the global array
}


void menu_addItem(Menu *menu, const char *text, void (*action)(Menu *)) {
 8e2:	ef 92       	push	r14
 8e4:	ff 92       	push	r15
 8e6:	0f 93       	push	r16
 8e8:	1f 93       	push	r17
 8ea:	cf 93       	push	r28
 8ec:	df 93       	push	r29
 8ee:	8c 01       	movw	r16, r24
 8f0:	7a 01       	movw	r14, r20
    if (menu->itemCount < MAX_MENU_ITEMS) {
 8f2:	ec 01       	movw	r28, r24
 8f4:	c1 54       	subi	r28, 0x41	; 65
 8f6:	df 4f       	sbci	r29, 0xFF	; 255
 8f8:	98 81       	ld	r25, Y
 8fa:	9a 30       	cpi	r25, 0x0A	; 10
 8fc:	e8 f4       	brcc	.+58     	; 0x938 <menu_addItem+0x56>
        strncpy(menu->items[menu->itemCount].text, text, MAX_MENU_LENGTH);
 8fe:	83 e1       	ldi	r24, 0x13	; 19
 900:	98 9f       	mul	r25, r24
 902:	c0 01       	movw	r24, r0
 904:	11 24       	eor	r1, r1
 906:	01 96       	adiw	r24, 0x01	; 1
 908:	80 0f       	add	r24, r16
 90a:	91 1f       	adc	r25, r17
 90c:	40 e1       	ldi	r20, 0x10	; 16
 90e:	50 e0       	ldi	r21, 0x00	; 0
 910:	0e 94 d0 05 	call	0xba0	; 0xba0 <strncpy>
        menu->items[menu->itemCount].action = action;
 914:	88 81       	ld	r24, Y
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	23 e1       	ldi	r18, 0x13	; 19
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	82 9f       	mul	r24, r18
 91e:	f0 01       	movw	r30, r0
 920:	83 9f       	mul	r24, r19
 922:	f0 0d       	add	r31, r0
 924:	92 9f       	mul	r25, r18
 926:	f0 0d       	add	r31, r0
 928:	11 24       	eor	r1, r1
 92a:	e0 0f       	add	r30, r16
 92c:	f1 1f       	adc	r31, r17
 92e:	f3 8a       	std	Z+19, r15	; 0x13
 930:	e2 8a       	std	Z+18, r14	; 0x12
        menu->itemCount++;
 932:	88 81       	ld	r24, Y
 934:	8f 5f       	subi	r24, 0xFF	; 255
 936:	88 83       	st	Y, r24
    }
}
 938:	df 91       	pop	r29
 93a:	cf 91       	pop	r28
 93c:	1f 91       	pop	r17
 93e:	0f 91       	pop	r16
 940:	ff 90       	pop	r15
 942:	ef 90       	pop	r14
 944:	08 95       	ret

00000946 <moveNext>:
#include "menu2.h"
#include <stdio.h>
#include <stdbool.h>

bool moveNext(MenuOption **root) {
 946:	dc 01       	movw	r26, r24
    if (root == NULL || (*root)->next == NULL)
 948:	00 97       	sbiw	r24, 0x00	; 0
 94a:	59 f0       	breq	.+22     	; 0x962 <moveNext+0x1c>
 94c:	ed 91       	ld	r30, X+
 94e:	fc 91       	ld	r31, X
 950:	11 97       	sbiw	r26, 0x01	; 1
 952:	84 81       	ldd	r24, Z+4	; 0x04
 954:	95 81       	ldd	r25, Z+5	; 0x05
 956:	00 97       	sbiw	r24, 0x00	; 0
 958:	21 f0       	breq	.+8      	; 0x962 <moveNext+0x1c>
        return false;
    *root = (*root)->next;
 95a:	8d 93       	st	X+, r24
 95c:	9c 93       	st	X, r25
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	08 95       	ret
    return true;
 962:	80 e0       	ldi	r24, 0x00	; 0
}
 964:	08 95       	ret

00000966 <movePrev>:

bool movePrev(MenuOption **root) {
 966:	dc 01       	movw	r26, r24
    if (root == NULL || (*root)->prev == NULL)
 968:	00 97       	sbiw	r24, 0x00	; 0
 96a:	59 f0       	breq	.+22     	; 0x982 <movePrev+0x1c>
 96c:	ed 91       	ld	r30, X+
 96e:	fc 91       	ld	r31, X
 970:	11 97       	sbiw	r26, 0x01	; 1
 972:	82 81       	ldd	r24, Z+2	; 0x02
 974:	93 81       	ldd	r25, Z+3	; 0x03
 976:	00 97       	sbiw	r24, 0x00	; 0
 978:	21 f0       	breq	.+8      	; 0x982 <movePrev+0x1c>
        return false;
    *root = (*root)->prev;
 97a:	8d 93       	st	X+, r24
 97c:	9c 93       	st	X, r25
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	08 95       	ret
    return true;
 982:	80 e0       	ldi	r24, 0x00	; 0
}
 984:	08 95       	ret

00000986 <moveToChild>:

bool moveToChild(MenuOption **root) {
 986:	dc 01       	movw	r26, r24
    if (root == NULL || (*root)->child == NULL)
 988:	00 97       	sbiw	r24, 0x00	; 0
 98a:	59 f0       	breq	.+22     	; 0x9a2 <moveToChild+0x1c>
 98c:	ed 91       	ld	r30, X+
 98e:	fc 91       	ld	r31, X
 990:	11 97       	sbiw	r26, 0x01	; 1
 992:	86 81       	ldd	r24, Z+6	; 0x06
 994:	97 81       	ldd	r25, Z+7	; 0x07
 996:	00 97       	sbiw	r24, 0x00	; 0
 998:	21 f0       	breq	.+8      	; 0x9a2 <moveToChild+0x1c>
        return false;
    *root = (*root)->child;
 99a:	8d 93       	st	X+, r24
 99c:	9c 93       	st	X, r25
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	08 95       	ret
    return true;
 9a2:	80 e0       	ldi	r24, 0x00	; 0
}
 9a4:	08 95       	ret

000009a6 <moveToParent>:

bool moveToParent(MenuOption **root) {
 9a6:	dc 01       	movw	r26, r24
    if (root == NULL || (*root)->parent == NULL)
 9a8:	00 97       	sbiw	r24, 0x00	; 0
 9aa:	59 f0       	breq	.+22     	; 0x9c2 <moveToParent+0x1c>
 9ac:	ed 91       	ld	r30, X+
 9ae:	fc 91       	ld	r31, X
 9b0:	11 97       	sbiw	r26, 0x01	; 1
 9b2:	80 85       	ldd	r24, Z+8	; 0x08
 9b4:	91 85       	ldd	r25, Z+9	; 0x09
 9b6:	00 97       	sbiw	r24, 0x00	; 0
 9b8:	21 f0       	breq	.+8      	; 0x9c2 <moveToParent+0x1c>
        return false;
    *root = (*root)->parent;
 9ba:	8d 93       	st	X+, r24
 9bc:	9c 93       	st	X, r25
 9be:	81 e0       	ldi	r24, 0x01	; 1
 9c0:	08 95       	ret
    return true;
 9c2:	80 e0       	ldi	r24, 0x00	; 0
}
 9c4:	08 95       	ret

000009c6 <initMenu>:

void initMenu(MenuOption **root) {
 9c6:	0f 93       	push	r16
 9c8:	1f 93       	push	r17
 9ca:	8c 01       	movw	r16, r24
    static MenuOption option1, option2, option3;
    static MenuOption option1_1, option1_2;
    static MenuOption option2_1, option2_2;

    // ================== option 1 ==================
    option1.title = "Menu 1";
 9cc:	6e e2       	ldi	r22, 0x2E	; 46
 9ce:	71 e0       	ldi	r23, 0x01	; 1
 9d0:	80 ea       	ldi	r24, 0xA0	; 160
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	90 93 2f 01 	sts	0x012F, r25
 9d8:	80 93 2e 01 	sts	0x012E, r24
    option1.next = &option2;
 9dc:	a0 e2       	ldi	r26, 0x20	; 32
 9de:	b1 e0       	ldi	r27, 0x01	; 1
 9e0:	b0 93 33 01 	sts	0x0133, r27
 9e4:	a0 93 32 01 	sts	0x0132, r26
    option1.prev = NULL;
 9e8:	10 92 31 01 	sts	0x0131, r1
 9ec:	10 92 30 01 	sts	0x0130, r1
    option1.child = NULL;
    option1.parent = NULL;
 9f0:	10 92 37 01 	sts	0x0137, r1
 9f4:	10 92 36 01 	sts	0x0136, r1
    option1.actionForward = &moveToChild;
 9f8:	e3 ec       	ldi	r30, 0xC3	; 195
 9fa:	f4 e0       	ldi	r31, 0x04	; 4
 9fc:	f0 93 39 01 	sts	0x0139, r31
 a00:	e0 93 38 01 	sts	0x0138, r30
    option1.actionBackward = &moveToParent;
 a04:	23 ed       	ldi	r18, 0xD3	; 211
 a06:	34 e0       	ldi	r19, 0x04	; 4
 a08:	30 93 3b 01 	sts	0x013B, r19
 a0c:	20 93 3a 01 	sts	0x013A, r18

    // ================== option 2 ==================
    option2.title = "Menu 2";
 a10:	87 ea       	ldi	r24, 0xA7	; 167
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	90 93 21 01 	sts	0x0121, r25
 a18:	80 93 20 01 	sts	0x0120, r24
    option2.next = &option3;
 a1c:	82 e1       	ldi	r24, 0x12	; 18
 a1e:	91 e0       	ldi	r25, 0x01	; 1
 a20:	90 93 25 01 	sts	0x0125, r25
 a24:	80 93 24 01 	sts	0x0124, r24
    option2.prev = &option1;
 a28:	70 93 23 01 	sts	0x0123, r23
 a2c:	60 93 22 01 	sts	0x0122, r22
    option2.child = NULL;
    option2.parent = NULL;
 a30:	10 92 29 01 	sts	0x0129, r1
 a34:	10 92 28 01 	sts	0x0128, r1
    option2.actionForward = &moveToChild;
 a38:	f0 93 2b 01 	sts	0x012B, r31
 a3c:	e0 93 2a 01 	sts	0x012A, r30
    option2.actionBackward = &moveToParent;
 a40:	30 93 2d 01 	sts	0x012D, r19
 a44:	20 93 2c 01 	sts	0x012C, r18

    // ================== option 3 ==================
    option3.title = "Menu 3";
 a48:	8e ea       	ldi	r24, 0xAE	; 174
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	90 93 13 01 	sts	0x0113, r25
 a50:	80 93 12 01 	sts	0x0112, r24
    option3.next = NULL;
 a54:	10 92 17 01 	sts	0x0117, r1
 a58:	10 92 16 01 	sts	0x0116, r1
    option3.prev = &option2;
 a5c:	b0 93 15 01 	sts	0x0115, r27
 a60:	a0 93 14 01 	sts	0x0114, r26
    option3.child = NULL;
 a64:	10 92 19 01 	sts	0x0119, r1
 a68:	10 92 18 01 	sts	0x0118, r1
    option3.parent = NULL;
 a6c:	10 92 1b 01 	sts	0x011B, r1
 a70:	10 92 1a 01 	sts	0x011A, r1
    option3.actionForward = &moveToChild;
 a74:	f0 93 1d 01 	sts	0x011D, r31
 a78:	e0 93 1c 01 	sts	0x011C, r30
    option3.actionBackward = &moveToParent;
 a7c:	30 93 1f 01 	sts	0x011F, r19
 a80:	20 93 1e 01 	sts	0x011E, r18

    // ================== option 1_1 ==================
    option1_1.title = "Menu 1_1";
 a84:	44 e0       	ldi	r20, 0x04	; 4
 a86:	51 e0       	ldi	r21, 0x01	; 1
 a88:	85 eb       	ldi	r24, 0xB5	; 181
 a8a:	90 e0       	ldi	r25, 0x00	; 0
 a8c:	90 93 05 01 	sts	0x0105, r25
 a90:	80 93 04 01 	sts	0x0104, r24
    option1_1.next = &option1_2;
 a94:	86 ef       	ldi	r24, 0xF6	; 246
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	90 93 09 01 	sts	0x0109, r25
 a9c:	80 93 08 01 	sts	0x0108, r24
    option1_1.prev = NULL;
 aa0:	10 92 07 01 	sts	0x0107, r1
 aa4:	10 92 06 01 	sts	0x0106, r1
    option1_1.child = NULL;
 aa8:	10 92 0b 01 	sts	0x010B, r1
 aac:	10 92 0a 01 	sts	0x010A, r1
    option1_1.parent = &option1;
 ab0:	70 93 0d 01 	sts	0x010D, r23
 ab4:	60 93 0c 01 	sts	0x010C, r22
    option1.child = &option1_1; // link parent
 ab8:	50 93 35 01 	sts	0x0135, r21
 abc:	40 93 34 01 	sts	0x0134, r20
    option1_1.actionForward = NULL;
 ac0:	10 92 0f 01 	sts	0x010F, r1
 ac4:	10 92 0e 01 	sts	0x010E, r1
    option1_1.actionBackward = &moveToParent;
 ac8:	30 93 11 01 	sts	0x0111, r19
 acc:	20 93 10 01 	sts	0x0110, r18

    // ================== option 1_2 ==================
    option1_2.title = "Menu 1_2";
 ad0:	8e eb       	ldi	r24, 0xBE	; 190
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	90 93 f7 00 	sts	0x00F7, r25
 ad8:	80 93 f6 00 	sts	0x00F6, r24
    option1_2.next = NULL;
 adc:	10 92 fb 00 	sts	0x00FB, r1
 ae0:	10 92 fa 00 	sts	0x00FA, r1
    option1_2.prev = &option1_1;
 ae4:	50 93 f9 00 	sts	0x00F9, r21
 ae8:	40 93 f8 00 	sts	0x00F8, r20
    option1_2.child = NULL;
 aec:	10 92 fd 00 	sts	0x00FD, r1
 af0:	10 92 fc 00 	sts	0x00FC, r1
    option1_2.parent = &option1;
 af4:	70 93 ff 00 	sts	0x00FF, r23
 af8:	60 93 fe 00 	sts	0x00FE, r22
    option1_2.actionForward = NULL;
 afc:	10 92 01 01 	sts	0x0101, r1
 b00:	10 92 00 01 	sts	0x0100, r1
    option1_2.actionBackward = &moveToParent;
 b04:	30 93 03 01 	sts	0x0103, r19
 b08:	20 93 02 01 	sts	0x0102, r18

    // ================== option 2_1 ==================
    option2_1.title = "Menu 2_1";
 b0c:	48 ee       	ldi	r20, 0xE8	; 232
 b0e:	50 e0       	ldi	r21, 0x00	; 0
 b10:	87 ec       	ldi	r24, 0xC7	; 199
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	90 93 e9 00 	sts	0x00E9, r25
 b18:	80 93 e8 00 	sts	0x00E8, r24
    option2_1.next = &option2_2;
 b1c:	8a ed       	ldi	r24, 0xDA	; 218
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	90 93 ed 00 	sts	0x00ED, r25
 b24:	80 93 ec 00 	sts	0x00EC, r24
    option2_1.prev = NULL;
 b28:	10 92 eb 00 	sts	0x00EB, r1
 b2c:	10 92 ea 00 	sts	0x00EA, r1
    option2_1.child = NULL;
 b30:	10 92 ef 00 	sts	0x00EF, r1
 b34:	10 92 ee 00 	sts	0x00EE, r1
    option2_1.parent = &option2;
 b38:	b0 93 f1 00 	sts	0x00F1, r27
 b3c:	a0 93 f0 00 	sts	0x00F0, r26
    option2.child = &option2_1; // link parent
 b40:	50 93 27 01 	sts	0x0127, r21
 b44:	40 93 26 01 	sts	0x0126, r20
    option2_1.actionForward = NULL;
 b48:	10 92 f3 00 	sts	0x00F3, r1
 b4c:	10 92 f2 00 	sts	0x00F2, r1
    option2_1.actionBackward = &moveToParent;
 b50:	30 93 f5 00 	sts	0x00F5, r19
 b54:	20 93 f4 00 	sts	0x00F4, r18

    // ================== option 1_2 ==================
    option2_2.title = "Menu 2_2";
 b58:	80 ed       	ldi	r24, 0xD0	; 208
 b5a:	90 e0       	ldi	r25, 0x00	; 0
 b5c:	90 93 db 00 	sts	0x00DB, r25
 b60:	80 93 da 00 	sts	0x00DA, r24
    option2_2.next = NULL;
 b64:	10 92 df 00 	sts	0x00DF, r1
 b68:	10 92 de 00 	sts	0x00DE, r1
    option2_2.prev = &option2_1;
 b6c:	50 93 dd 00 	sts	0x00DD, r21
 b70:	40 93 dc 00 	sts	0x00DC, r20
    option2_2.child = &option1;
 b74:	70 93 e1 00 	sts	0x00E1, r23
 b78:	60 93 e0 00 	sts	0x00E0, r22
    option2_2.parent = &option2;
 b7c:	b0 93 e3 00 	sts	0x00E3, r27
 b80:	a0 93 e2 00 	sts	0x00E2, r26
    option2_2.actionForward = &moveToChild;
 b84:	f0 93 e5 00 	sts	0x00E5, r31
 b88:	e0 93 e4 00 	sts	0x00E4, r30
    option2_2.actionBackward = &moveToParent;
 b8c:	30 93 e7 00 	sts	0x00E7, r19
 b90:	20 93 e6 00 	sts	0x00E6, r18

    // ============= return initial value =============
    *root = &option1;
 b94:	f8 01       	movw	r30, r16
 b96:	71 83       	std	Z+1, r23	; 0x01
 b98:	60 83       	st	Z, r22
}
 b9a:	1f 91       	pop	r17
 b9c:	0f 91       	pop	r16
 b9e:	08 95       	ret

00000ba0 <strncpy>:
 ba0:	fb 01       	movw	r30, r22
 ba2:	dc 01       	movw	r26, r24
 ba4:	41 50       	subi	r20, 0x01	; 1
 ba6:	50 40       	sbci	r21, 0x00	; 0
 ba8:	48 f0       	brcs	.+18     	; 0xbbc <strncpy+0x1c>
 baa:	01 90       	ld	r0, Z+
 bac:	0d 92       	st	X+, r0
 bae:	00 20       	and	r0, r0
 bb0:	c9 f7       	brne	.-14     	; 0xba4 <strncpy+0x4>
 bb2:	01 c0       	rjmp	.+2      	; 0xbb6 <strncpy+0x16>
 bb4:	1d 92       	st	X+, r1
 bb6:	41 50       	subi	r20, 0x01	; 1
 bb8:	50 40       	sbci	r21, 0x00	; 0
 bba:	e0 f7       	brcc	.-8      	; 0xbb4 <strncpy+0x14>
 bbc:	08 95       	ret

00000bbe <_exit>:
 bbe:	f8 94       	cli

00000bc0 <__stop_program>:
 bc0:	ff cf       	rjmp	.-2      	; 0xbc0 <__stop_program>
