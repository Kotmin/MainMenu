
App1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000be2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007a  00800060  00000be2  00000c76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000818  008000da  008000da  00000cf0  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002e8  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001259  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000633  00000000  00000000  000022d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d05  00000000  00000000  00002904  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  0000360c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000459  00000000  00000000  0000389c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000926  00000000  00000000  00003cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000461b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000054 <kolumny>:
  54:	10 20 40 80                                         . @.

00000058 <tab>:
  58:	01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10     ................
	...

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf e5       	ldi	r28, 0x5F	; 95
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	e2 ee       	ldi	r30, 0xE2	; 226
  7e:	fb e0       	ldi	r31, 0x0B	; 11
  80:	02 c0       	rjmp	.+4      	; 0x86 <.do_copy_data_start>

00000082 <.do_copy_data_loop>:
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0

00000086 <.do_copy_data_start>:
  86:	aa 3d       	cpi	r26, 0xDA	; 218
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <.do_copy_data_loop>

0000008c <__do_clear_bss>:
  8c:	18 e0       	ldi	r17, 0x08	; 8
  8e:	aa ed       	ldi	r26, 0xDA	; 218
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a2 3f       	cpi	r26, 0xF2	; 242
  98:	b1 07       	cpc	r27, r17
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>
  9c:	0e 94 38 01 	call	0x270	; 0x270 <main>
  a0:	0c 94 ef 05 	jmp	0xbde	; 0xbde <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <option1_action>:


void option1_action(void) {
    // Action for option 1
	return;
		}
  a8:	08 95       	ret

000000aa <option2_action>:

void option2_action(void) {
    // Action for option 2
		return;
}
  aa:	08 95       	ret

000000ac <goToMainMenu>:
void goToMenu4(Menu **currentMenuPtr) {
    *currentMenuPtr = &menu4;
    menu_display(*currentMenuPtr);
}

void goToMainMenu(Menu **currentMenuPtr) {
  ac:	fc 01       	movw	r30, r24
    *currentMenuPtr = &mainMenu;
  ae:	80 e4       	ldi	r24, 0x40	; 64
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	91 83       	std	Z+1, r25	; 0x01
  b4:	80 83       	st	Z, r24
    menu_display(*currentMenuPtr);
  b6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <menu_display>
}
  ba:	08 95       	ret

000000bc <goToMenu4>:
void goToMenu3(Menu **currentMenuPtr) {
    *currentMenuPtr = &menu3;
    menu_display(*currentMenuPtr);
}

void goToMenu4(Menu **currentMenuPtr) {
  bc:	fc 01       	movw	r30, r24
    *currentMenuPtr = &menu4;
  be:	8a ec       	ldi	r24, 0xCA	; 202
  c0:	92 e0       	ldi	r25, 0x02	; 2
  c2:	91 83       	std	Z+1, r25	; 0x01
  c4:	80 83       	st	Z, r24
    menu_display(*currentMenuPtr);
  c6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <menu_display>
}
  ca:	08 95       	ret

000000cc <goToMenu3>:
void goToMenu2(Menu **currentMenuPtr) {
    *currentMenuPtr = &menu2;
    menu_display(*currentMenuPtr);
}

void goToMenu3(Menu **currentMenuPtr) {
  cc:	fc 01       	movw	r30, r24
    *currentMenuPtr = &menu3;
  ce:	84 e5       	ldi	r24, 0x54	; 84
  d0:	94 e0       	ldi	r25, 0x04	; 4
  d2:	91 83       	std	Z+1, r25	; 0x01
  d4:	80 83       	st	Z, r24
    menu_display(*currentMenuPtr);
  d6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <menu_display>
}
  da:	08 95       	ret

000000dc <goToMenu2>:
void goToMenu1(Menu **currentMenuPtr) {
    *currentMenuPtr = &menu1;
    menu_display(*currentMenuPtr);
}

void goToMenu2(Menu **currentMenuPtr) {
  dc:	fc 01       	movw	r30, r24
    *currentMenuPtr = &menu2;
  de:	8f e8       	ldi	r24, 0x8F	; 143
  e0:	93 e0       	ldi	r25, 0x03	; 3
  e2:	91 83       	std	Z+1, r25	; 0x01
  e4:	80 83       	st	Z, r24
    menu_display(*currentMenuPtr);
  e6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <menu_display>
}
  ea:	08 95       	ret

000000ec <goToMenu1>:
		    }

    	
}

void goToMenu1(Menu **currentMenuPtr) {
  ec:	fc 01       	movw	r30, r24
    *currentMenuPtr = &menu1;
  ee:	85 e0       	ldi	r24, 0x05	; 5
  f0:	92 e0       	ldi	r25, 0x02	; 2
  f2:	91 83       	std	Z+1, r25	; 0x01
  f4:	80 83       	st	Z, r24
    menu_display(*currentMenuPtr);
  f6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <menu_display>
}
  fa:	08 95       	ret

000000fc <setupMenus>:



Menu mainMenu, menu1, menu2, menu3, menu4;

void setupMenus() {
  fc:	2f 92       	push	r2
  fe:	3f 92       	push	r3
 100:	4f 92       	push	r4
 102:	5f 92       	push	r5
 104:	6f 92       	push	r6
 106:	7f 92       	push	r7
 108:	8f 92       	push	r8
 10a:	9f 92       	push	r9
 10c:	af 92       	push	r10
 10e:	bf 92       	push	r11
 110:	cf 92       	push	r12
 112:	df 92       	push	r13
 114:	ef 92       	push	r14
 116:	ff 92       	push	r15
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	df 93       	push	r29
 11e:	cf 93       	push	r28
 120:	00 d0       	rcall	.+0      	; 0x122 <setupMenus+0x26>
 122:	00 d0       	rcall	.+0      	; 0x124 <setupMenus+0x28>
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
    LCD lcd1; // Assuming this is your LCD object
    LCD_init(&lcd1, 'B'); // Initialize LCD
 128:	8e 01       	movw	r16, r28
 12a:	0f 5f       	subi	r16, 0xFF	; 255
 12c:	1f 4f       	sbci	r17, 0xFF	; 255
 12e:	c8 01       	movw	r24, r16
 130:	62 e4       	ldi	r22, 0x42	; 66
 132:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_init>

    // Initialize menus
    menu_init(&mainMenu, 0, &lcd1, NULL);
 136:	60 e4       	ldi	r22, 0x40	; 64
 138:	c6 2e       	mov	r12, r22
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	d6 2e       	mov	r13, r22
 13e:	c6 01       	movw	r24, r12
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	a8 01       	movw	r20, r16
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	0e 94 b8 03 	call	0x770	; 0x770 <menu_init>
    menu_init(&menu1, 1, &lcd1, &mainMenu);
 14c:	55 e0       	ldi	r21, 0x05	; 5
 14e:	45 2e       	mov	r4, r21
 150:	52 e0       	ldi	r21, 0x02	; 2
 152:	55 2e       	mov	r5, r21
 154:	c2 01       	movw	r24, r4
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	a8 01       	movw	r20, r16
 15a:	96 01       	movw	r18, r12
 15c:	0e 94 b8 03 	call	0x770	; 0x770 <menu_init>
    menu_init(&menu2, 2, &lcd1, &mainMenu);
 160:	4f e8       	ldi	r20, 0x8F	; 143
 162:	24 2e       	mov	r2, r20
 164:	43 e0       	ldi	r20, 0x03	; 3
 166:	34 2e       	mov	r3, r20
 168:	c1 01       	movw	r24, r2
 16a:	62 e0       	ldi	r22, 0x02	; 2
 16c:	a8 01       	movw	r20, r16
 16e:	96 01       	movw	r18, r12
 170:	0e 94 b8 03 	call	0x770	; 0x770 <menu_init>
    menu_init(&menu3, 3, &lcd1, &mainMenu);
 174:	34 e5       	ldi	r19, 0x54	; 84
 176:	63 2e       	mov	r6, r19
 178:	34 e0       	ldi	r19, 0x04	; 4
 17a:	73 2e       	mov	r7, r19
 17c:	c3 01       	movw	r24, r6
 17e:	63 e0       	ldi	r22, 0x03	; 3
 180:	a8 01       	movw	r20, r16
 182:	96 01       	movw	r18, r12
 184:	0e 94 b8 03 	call	0x770	; 0x770 <menu_init>
	menu_init(&menu4, 4, &lcd1, &menu3);
 188:	8a ec       	ldi	r24, 0xCA	; 202
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	64 e0       	ldi	r22, 0x04	; 4
 18e:	a8 01       	movw	r20, r16
 190:	93 01       	movw	r18, r6
 192:	0e 94 b8 03 	call	0x770	; 0x770 <menu_init>

    // Add items to mainMenu
    menu_addItem(&mainMenu, "Menu 1", goToMenu1);
 196:	c6 01       	movw	r24, r12
 198:	60 e6       	ldi	r22, 0x60	; 96
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	46 e7       	ldi	r20, 0x76	; 118
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	0e 94 81 04 	call	0x902	; 0x902 <menu_addItem>
    menu_addItem(&mainMenu, "Menu 2", goToMenu2);
 1a4:	c6 01       	movw	r24, r12
 1a6:	67 e6       	ldi	r22, 0x67	; 103
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	4e e6       	ldi	r20, 0x6E	; 110
 1ac:	50 e0       	ldi	r21, 0x00	; 0
 1ae:	0e 94 81 04 	call	0x902	; 0x902 <menu_addItem>
    menu_addItem(&mainMenu, "Menu 3", goToMenu3);
 1b2:	c6 01       	movw	r24, r12
 1b4:	6e e6       	ldi	r22, 0x6E	; 110
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	46 e6       	ldi	r20, 0x66	; 102
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	0e 94 81 04 	call	0x902	; 0x902 <menu_addItem>


    menu_addItem(&menu1, "Option 1", option1_action);
 1c0:	24 e5       	ldi	r18, 0x54	; 84
 1c2:	e2 2e       	mov	r14, r18
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	f2 2e       	mov	r15, r18
 1c8:	05 e7       	ldi	r16, 0x75	; 117
 1ca:	10 e0       	ldi	r17, 0x00	; 0
 1cc:	c2 01       	movw	r24, r4
 1ce:	b8 01       	movw	r22, r16
 1d0:	a7 01       	movw	r20, r14
 1d2:	0e 94 81 04 	call	0x902	; 0x902 <menu_addItem>
    menu_addItem(&menu1, "Option 2", option2_action);
 1d6:	95 e5       	ldi	r25, 0x55	; 85
 1d8:	89 2e       	mov	r8, r25
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	99 2e       	mov	r9, r25
 1de:	8e e7       	ldi	r24, 0x7E	; 126
 1e0:	a8 2e       	mov	r10, r24
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	b8 2e       	mov	r11, r24
 1e6:	c2 01       	movw	r24, r4
 1e8:	b5 01       	movw	r22, r10
 1ea:	a4 01       	movw	r20, r8
 1ec:	0e 94 81 04 	call	0x902	; 0x902 <menu_addItem>

	menu_addItem(&menu2, "Option 1", option1_action);
 1f0:	c1 01       	movw	r24, r2
 1f2:	b8 01       	movw	r22, r16
 1f4:	a7 01       	movw	r20, r14
 1f6:	0e 94 81 04 	call	0x902	; 0x902 <menu_addItem>
    menu_addItem(&menu2, "Option 2", option2_action);
 1fa:	c1 01       	movw	r24, r2
 1fc:	b5 01       	movw	r22, r10
 1fe:	a4 01       	movw	r20, r8
 200:	0e 94 81 04 	call	0x902	; 0x902 <menu_addItem>

	menu_addItem(&menu3, "Option 1", option1_action);
 204:	c3 01       	movw	r24, r6
 206:	b8 01       	movw	r22, r16
 208:	a7 01       	movw	r20, r14
 20a:	0e 94 81 04 	call	0x902	; 0x902 <menu_addItem>
    menu_addItem(&menu3, "Return", goToMenu4);
 20e:	c3 01       	movw	r24, r6
 210:	67 e8       	ldi	r22, 0x87	; 135
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	4e e5       	ldi	r20, 0x5E	; 94
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	0e 94 81 04 	call	0x902	; 0x902 <menu_addItem>

	menu_addItem(&menu4, "Main Menu", goToMainMenu);
 21c:	8a ec       	ldi	r24, 0xCA	; 202
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	6e e8       	ldi	r22, 0x8E	; 142
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	46 e5       	ldi	r20, 0x56	; 86
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	0e 94 81 04 	call	0x902	; 0x902 <menu_addItem>
    menu_addItem(&menu4, "Menu 1", goToMenu1);
 22c:	8a ec       	ldi	r24, 0xCA	; 202
 22e:	92 e0       	ldi	r25, 0x02	; 2
 230:	60 e6       	ldi	r22, 0x60	; 96
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	46 e7       	ldi	r20, 0x76	; 118
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	0e 94 81 04 	call	0x902	; 0x902 <menu_addItem>


    // Display the main menu
    menu_display(&mainMenu);
 23c:	c6 01       	movw	r24, r12
 23e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <menu_display>
}
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	0f 90       	pop	r0
 24a:	cf 91       	pop	r28
 24c:	df 91       	pop	r29
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	ff 90       	pop	r15
 254:	ef 90       	pop	r14
 256:	df 90       	pop	r13
 258:	cf 90       	pop	r12
 25a:	bf 90       	pop	r11
 25c:	af 90       	pop	r10
 25e:	9f 90       	pop	r9
 260:	8f 90       	pop	r8
 262:	7f 90       	pop	r7
 264:	6f 90       	pop	r6
 266:	5f 90       	pop	r5
 268:	4f 90       	pop	r4
 26a:	3f 90       	pop	r3
 26c:	2f 90       	pop	r2
 26e:	08 95       	ret

00000270 <main>:




int main(void)
{
 270:	cf 92       	push	r12
 272:	df 92       	push	r13
 274:	ef 92       	push	r14
 276:	ff 92       	push	r15
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	df 93       	push	r29
 27e:	cf 93       	push	r28
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
 284:	28 97       	sbiw	r28, 0x08	; 8
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
	// Set kbd port
	set_DDR('A');
 290:	81 e4       	ldi	r24, 0x41	; 65
 292:	0e 94 e6 01 	call	0x3cc	; 0x3cc <set_DDR>
	//Led bar
	DDRD =0xFF;
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	81 bb       	out	0x11, r24	; 17
	PORTD =0xFF;
 29a:	82 bb       	out	0x12, r24	; 18

//	LCD lcd1;
    LCD_init(&lcd1, 'B'); // Initialize LCD on PORTB
 29c:	8a ed       	ldi	r24, 0xDA	; 218
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	62 e4       	ldi	r22, 0x42	; 66
 2a2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_init>
	menu_display(&menu);
*/

//	 setupMenus();

	Menu *currentMenu = &mainMenu;
 2a6:	00 e4       	ldi	r16, 0x40	; 64
 2a8:	11 e0       	ldi	r17, 0x01	; 1
 2aa:	1a 83       	std	Y+2, r17	; 0x02
 2ac:	09 83       	std	Y+1, r16	; 0x01
//	Menu *currentMenu = &menu;

	// menu 2 section
	MenuOption *currentOption;

    initMenu(&currentOption);
 2ae:	e3 e0       	ldi	r30, 0x03	; 3
 2b0:	ce 2e       	mov	r12, r30
 2b2:	d1 2c       	mov	r13, r1
 2b4:	cc 0e       	add	r12, r28
 2b6:	dd 1e       	adc	r13, r29
 2b8:	c6 01       	movw	r24, r12
 2ba:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <initMenu>

// recombine init m functions
    LCD lcd1; // Assuming this is your LCD object
    LCD_init(&lcd1, 'B'); // Initialize LCD
 2be:	75 e0       	ldi	r23, 0x05	; 5
 2c0:	e7 2e       	mov	r14, r23
 2c2:	f1 2c       	mov	r15, r1
 2c4:	ec 0e       	add	r14, r28
 2c6:	fd 1e       	adc	r15, r29
 2c8:	c7 01       	movw	r24, r14
 2ca:	62 e4       	ldi	r22, 0x42	; 66
 2cc:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_init>
	    // Initialize menus

    menu_init(&mainMenu, 0, &lcd1, NULL);
 2d0:	c8 01       	movw	r24, r16
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	a7 01       	movw	r20, r14
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	0e 94 b8 03 	call	0x770	; 0x770 <menu_init>

	    // Add items to mainMenu
    menu_addItem(&mainMenu, "Menu 1", goToMenu1);
 2de:	c8 01       	movw	r24, r16
 2e0:	60 e6       	ldi	r22, 0x60	; 96
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	46 e7       	ldi	r20, 0x76	; 118
 2e6:	50 e0       	ldi	r21, 0x00	; 0
 2e8:	0e 94 81 04 	call	0x902	; 0x902 <menu_addItem>
    menu_addItem(&mainMenu, "Menu 2", goToMenu2);
 2ec:	c8 01       	movw	r24, r16
 2ee:	67 e6       	ldi	r22, 0x67	; 103
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	4e e6       	ldi	r20, 0x6E	; 110
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	0e 94 81 04 	call	0x902	; 0x902 <menu_addItem>
    menu_addItem(&mainMenu, "Menu 3", goToMenu3);
 2fa:	c8 01       	movw	r24, r16
 2fc:	6e e6       	ldi	r22, 0x6E	; 110
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	46 e6       	ldi	r20, 0x66	; 102
 302:	50 e0       	ldi	r21, 0x00	; 0
 304:	0e 94 81 04 	call	0x902	; 0x902 <menu_addItem>

	menu_init(&menu1, 1, &lcd1, &mainMenu);
 308:	85 e0       	ldi	r24, 0x05	; 5
 30a:	92 e0       	ldi	r25, 0x02	; 2
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	a7 01       	movw	r20, r14
 310:	98 01       	movw	r18, r16
 312:	0e 94 b8 03 	call	0x770	; 0x770 <menu_init>
	menu_addItem(&menu1, "Sm1", option1_action);
 316:	85 e0       	ldi	r24, 0x05	; 5
 318:	92 e0       	ldi	r25, 0x02	; 2
 31a:	68 e9       	ldi	r22, 0x98	; 152
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	44 e5       	ldi	r20, 0x54	; 84
 320:	50 e0       	ldi	r21, 0x00	; 0
 322:	0e 94 81 04 	call	0x902	; 0x902 <menu_addItem>
    menu_addItem(&menu1, "Sm2", option2_action);
 326:	85 e0       	ldi	r24, 0x05	; 5
 328:	92 e0       	ldi	r25, 0x02	; 2
 32a:	6c e9       	ldi	r22, 0x9C	; 156
 32c:	70 e0       	ldi	r23, 0x00	; 0
 32e:	45 e5       	ldi	r20, 0x55	; 85
 330:	50 e0       	ldi	r21, 0x00	; 0
 332:	0e 94 81 04 	call	0x902	; 0x902 <menu_addItem>




    // Display the main menu
    menu_display(&mainMenu);
 336:	c8 01       	movw	r24, r16
 338:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <menu_display>
            case 8: // Down
                menu_nextItem(currentMenu);
				movePrev(&currentOption);
                break;
            case 12: // Enter
                menu_selectItem(&currentMenu); // Pass the address of currentMenu
 33c:	7e 01       	movw	r14, r28
 33e:	08 94       	sec
 340:	e1 1c       	adc	r14, r1
 342:	f1 1c       	adc	r15, r1
            case 16: // Return
                if (currentMenu->parentMenu != NULL) {
                    currentMenu = currentMenu->parentMenu;
                    menu_display(currentMenu);
				if (currentOption->actionBackward != NULL)
                    currentOption->actionBackward(&currentOption);
 344:	0c 2d       	mov	r16, r12
 346:	cd 2c       	mov	r12, r13
    // Display the main menu
    menu_display(&mainMenu);

    while (1) 
    {
		PORTD = get_key('d', 'A');
 348:	84 e6       	ldi	r24, 0x64	; 100
 34a:	61 e4       	ldi	r22, 0x41	; 65
 34c:	0e 94 4a 02 	call	0x494	; 0x494 <get_key>
 350:	82 bb       	out	0x12, r24	; 18
        }
		    }

			*/

			 switch (get_key('d', 'A')) {
 352:	84 e6       	ldi	r24, 0x64	; 100
 354:	61 e4       	ldi	r22, 0x41	; 65
 356:	0e 94 4a 02 	call	0x494	; 0x494 <get_key>
 35a:	88 30       	cpi	r24, 0x08	; 8
 35c:	99 f0       	breq	.+38     	; 0x384 <main+0x114>
 35e:	89 30       	cpi	r24, 0x09	; 9
 360:	1c f4       	brge	.+6      	; 0x368 <main+0xf8>
 362:	84 30       	cpi	r24, 0x04	; 4
 364:	89 f7       	brne	.-30     	; 0x348 <main+0xd8>
 366:	05 c0       	rjmp	.+10     	; 0x372 <main+0x102>
 368:	8c 30       	cpi	r24, 0x0C	; 12
 36a:	a9 f0       	breq	.+42     	; 0x396 <main+0x126>
 36c:	80 31       	cpi	r24, 0x10	; 16
 36e:	61 f7       	brne	.-40     	; 0x348 <main+0xd8>
 370:	16 c0       	rjmp	.+44     	; 0x39e <main+0x12e>
            case 4: // Up
                menu_prevItem(currentMenu);
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	9a 81       	ldd	r25, Y+2	; 0x02
 376:	0e 94 5f 04 	call	0x8be	; 0x8be <menu_prevItem>
				moveNext(&currentOption);
 37a:	80 2f       	mov	r24, r16
 37c:	9c 2d       	mov	r25, r12
 37e:	0e 94 b3 04 	call	0x966	; 0x966 <moveNext>
 382:	e2 cf       	rjmp	.-60     	; 0x348 <main+0xd8>
                break;
            case 8: // Down
                menu_nextItem(currentMenu);
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	9a 81       	ldd	r25, Y+2	; 0x02
 388:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <menu_nextItem>
				movePrev(&currentOption);
 38c:	80 2f       	mov	r24, r16
 38e:	9c 2d       	mov	r25, r12
 390:	0e 94 c3 04 	call	0x986	; 0x986 <movePrev>
 394:	d9 cf       	rjmp	.-78     	; 0x348 <main+0xd8>
                break;
            case 12: // Enter
                menu_selectItem(&currentMenu); // Pass the address of currentMenu
 396:	c7 01       	movw	r24, r14
 398:	0e 94 d6 03 	call	0x7ac	; 0x7ac <menu_selectItem>
 39c:	d5 cf       	rjmp	.-86     	; 0x348 <main+0xd8>

                break;
            case 16: // Return
                if (currentMenu->parentMenu != NULL) {
 39e:	e9 81       	ldd	r30, Y+1	; 0x01
 3a0:	fa 81       	ldd	r31, Y+2	; 0x02
 3a2:	ed 53       	subi	r30, 0x3D	; 61
 3a4:	ff 4f       	sbci	r31, 0xFF	; 255
 3a6:	80 81       	ld	r24, Z
 3a8:	91 81       	ldd	r25, Z+1	; 0x01
 3aa:	00 97       	sbiw	r24, 0x00	; 0
 3ac:	69 f2       	breq	.-102    	; 0x348 <main+0xd8>
                    currentMenu = currentMenu->parentMenu;
 3ae:	9a 83       	std	Y+2, r25	; 0x02
 3b0:	89 83       	std	Y+1, r24	; 0x01
                    menu_display(currentMenu);
 3b2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <menu_display>
				if (currentOption->actionBackward != NULL)
 3b6:	eb 81       	ldd	r30, Y+3	; 0x03
 3b8:	fc 81       	ldd	r31, Y+4	; 0x04
 3ba:	04 84       	ldd	r0, Z+12	; 0x0c
 3bc:	f5 85       	ldd	r31, Z+13	; 0x0d
 3be:	e0 2d       	mov	r30, r0
 3c0:	30 97       	sbiw	r30, 0x00	; 0
 3c2:	11 f2       	breq	.-124    	; 0x348 <main+0xd8>
                    currentOption->actionBackward(&currentOption);
 3c4:	80 2f       	mov	r24, r16
 3c6:	9c 2d       	mov	r25, r12
 3c8:	09 95       	icall
 3ca:	be cf       	rjmp	.-132    	; 0x348 <main+0xd8>

000003cc <set_DDR>:
								9,10,11,12,
								13,14,15,16,
								0};

void set_DDR(char port_name){
	switch(port_name){
 3cc:	82 34       	cpi	r24, 0x42	; 66
 3ce:	79 f0       	breq	.+30     	; 0x3ee <set_DDR+0x22>
 3d0:	83 34       	cpi	r24, 0x43	; 67
 3d2:	18 f4       	brcc	.+6      	; 0x3da <set_DDR+0xe>
 3d4:	81 34       	cpi	r24, 0x41	; 65
 3d6:	c9 f4       	brne	.+50     	; 0x40a <set_DDR+0x3e>
 3d8:	05 c0       	rjmp	.+10     	; 0x3e4 <set_DDR+0x18>
 3da:	83 34       	cpi	r24, 0x43	; 67
 3dc:	69 f0       	breq	.+26     	; 0x3f8 <set_DDR+0x2c>
 3de:	84 34       	cpi	r24, 0x44	; 68
 3e0:	a1 f4       	brne	.+40     	; 0x40a <set_DDR+0x3e>
 3e2:	0f c0       	rjmp	.+30     	; 0x402 <set_DDR+0x36>
		case 'A':
		DDRA = 0xF0;
 3e4:	80 ef       	ldi	r24, 0xF0	; 240
 3e6:	8a bb       	out	0x1a, r24	; 26
		PORTA=0x0F;
 3e8:	8f e0       	ldi	r24, 0x0F	; 15
 3ea:	8b bb       	out	0x1b, r24	; 27
 3ec:	08 95       	ret
		
		break;
		case 'B':
		DDRB = 0xF0;
 3ee:	80 ef       	ldi	r24, 0xF0	; 240
 3f0:	87 bb       	out	0x17, r24	; 23
		PORTB=0x0F;
 3f2:	8f e0       	ldi	r24, 0x0F	; 15
 3f4:	88 bb       	out	0x18, r24	; 24
 3f6:	08 95       	ret
		
		break;
		case 'C':
		DDRC = 0xF0;
 3f8:	80 ef       	ldi	r24, 0xF0	; 240
 3fa:	84 bb       	out	0x14, r24	; 20
		PORTC=0x0F;
 3fc:	8f e0       	ldi	r24, 0x0F	; 15
 3fe:	85 bb       	out	0x15, r24	; 21
 400:	08 95       	ret
		
		break;
		
		case 'D':
		DDRD = 0xF0;
 402:	80 ef       	ldi	r24, 0xF0	; 240
 404:	81 bb       	out	0x11, r24	; 17
		PORTD=0x0F;
 406:	8f e0       	ldi	r24, 0x0F	; 15
 408:	82 bb       	out	0x12, r24	; 18
 40a:	08 95       	ret

0000040c <setPort>:
}//koniec getKey


void setPort(const char port_name, int8_t state)
{
	switch(port_name)
 40c:	82 34       	cpi	r24, 0x42	; 66
 40e:	61 f0       	breq	.+24     	; 0x428 <setPort+0x1c>
 410:	83 34       	cpi	r24, 0x43	; 67
 412:	18 f4       	brcc	.+6      	; 0x41a <setPort+0xe>
 414:	81 34       	cpi	r24, 0x41	; 65
 416:	69 f4       	brne	.+26     	; 0x432 <setPort+0x26>
 418:	05 c0       	rjmp	.+10     	; 0x424 <setPort+0x18>
 41a:	83 34       	cpi	r24, 0x43	; 67
 41c:	39 f0       	breq	.+14     	; 0x42c <setPort+0x20>
 41e:	84 34       	cpi	r24, 0x44	; 68
 420:	41 f4       	brne	.+16     	; 0x432 <setPort+0x26>
 422:	06 c0       	rjmp	.+12     	; 0x430 <setPort+0x24>
	{
		case 'A':
		PORTA = state;
 424:	6b bb       	out	0x1b, r22	; 27
 426:	08 95       	ret
		break;
		case 'B':
		PORTB = state;
 428:	68 bb       	out	0x18, r22	; 24
 42a:	08 95       	ret
		break;
		case 'C':
		PORTC = state;
 42c:	65 bb       	out	0x15, r22	; 21
 42e:	08 95       	ret
		break;
		case 'D':
		PORTD = state;
 430:	62 bb       	out	0x12, r22	; 18
 432:	08 95       	ret

00000434 <getPin>:
	
}
int8_t getPin(const char port_name)
{
	int8_t x=0xbF0;
	switch(port_name)
 434:	82 34       	cpi	r24, 0x42	; 66
 436:	69 f0       	breq	.+26     	; 0x452 <getPin+0x1e>
 438:	83 34       	cpi	r24, 0x43	; 67
 43a:	18 f4       	brcc	.+6      	; 0x442 <getPin+0xe>
 43c:	81 34       	cpi	r24, 0x41	; 65
 43e:	29 f4       	brne	.+10     	; 0x44a <getPin+0x16>
 440:	06 c0       	rjmp	.+12     	; 0x44e <getPin+0x1a>
 442:	83 34       	cpi	r24, 0x43	; 67
 444:	41 f0       	breq	.+16     	; 0x456 <getPin+0x22>
 446:	84 34       	cpi	r24, 0x44	; 68
 448:	49 f0       	breq	.+18     	; 0x45c <getPin+0x28>
 44a:	80 ef       	ldi	r24, 0xF0	; 240
 44c:	08 95       	ret
	{
		case 'A':
		x = 0x0F & PINA;
 44e:	89 b3       	in	r24, 0x19	; 25
 450:	03 c0       	rjmp	.+6      	; 0x458 <getPin+0x24>
		break;
		case 'B':
		x = 0x0F & PINB;
 452:	86 b3       	in	r24, 0x16	; 22
 454:	01 c0       	rjmp	.+2      	; 0x458 <getPin+0x24>
		break;
		case 'C':
		x = 0x0F & PINC;
 456:	83 b3       	in	r24, 0x13	; 19
 458:	8f 70       	andi	r24, 0x0F	; 15
 45a:	08 95       	ret
		break;
		case 'D':
		x = 0x0F & PIND;
 45c:	80 b3       	in	r24, 0x10	; 16
 45e:	8f 70       	andi	r24, 0x0F	; 15
		break;
	}
	return x;
}
 460:	08 95       	ret

00000462 <translate>:



int8_t translate(int key_rcode){
		switch(key_rcode)
 462:	8b 30       	cpi	r24, 0x0B	; 11
 464:	91 05       	cpc	r25, r1
 466:	81 f0       	breq	.+32     	; 0x488 <translate+0x26>
 468:	8c 30       	cpi	r24, 0x0C	; 12
 46a:	91 05       	cpc	r25, r1
 46c:	1c f4       	brge	.+6      	; 0x474 <translate+0x12>
 46e:	07 97       	sbiw	r24, 0x07	; 7
 470:	79 f4       	brne	.+30     	; 0x490 <translate+0x2e>
 472:	0c c0       	rjmp	.+24     	; 0x48c <translate+0x2a>
 474:	8d 30       	cpi	r24, 0x0D	; 13
 476:	91 05       	cpc	r25, r1
 478:	19 f0       	breq	.+6      	; 0x480 <translate+0x1e>
 47a:	0e 97       	sbiw	r24, 0x0e	; 14
 47c:	49 f4       	brne	.+18     	; 0x490 <translate+0x2e>
 47e:	02 c0       	rjmp	.+4      	; 0x484 <translate+0x22>
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	08 95       	ret
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	08 95       	ret
 488:	83 e0       	ldi	r24, 0x03	; 3
 48a:	08 95       	ret
		break;
		case 0b00001101:
			return 2;
			break;
		case 0b00001011:
			return 3;
 48c:	84 e0       	ldi	r24, 0x04	; 4
 48e:	08 95       	ret
			break;
		case 0b00000111:
			return 4;
 490:	80 e0       	ldi	r24, 0x00	; 0
			break;
		default:
			return 0;
				}
}
 492:	08 95       	ret

00000494 <get_key>:
}



int8_t get_key(const char type, const char port_name) 
{
 494:	cf 92       	push	r12
 496:	df 92       	push	r13
 498:	ef 92       	push	r14
 49a:	ff 92       	push	r15
 49c:	0f 93       	push	r16
 49e:	1f 93       	push	r17
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
 4a4:	06 2f       	mov	r16, r22
	int8_t temp, row = 0,ret_key_index_number = 0, state,h_port,l_port;
	if(type == 'M' | type =='m'){
 4a6:	8d 34       	cpi	r24, 0x4D	; 77
 4a8:	11 f0       	breq	.+4      	; 0x4ae <get_key+0x1a>
 4aa:	8d 36       	cpi	r24, 0x6D	; 109
 4ac:	91 f4       	brne	.+36     	; 0x4d2 <get_key+0x3e>
		state = ~(1<<4); //wstawiamy to zero krocz?ce, w zasadzie to w tym przypadku nie kroczace
		setPort(port_name, state);
 4ae:	80 2f       	mov	r24, r16
 4b0:	6f ee       	ldi	r22, 0xEF	; 239
 4b2:	0e 94 06 02 	call	0x40c	; 0x40c <setPort>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4b6:	80 ea       	ldi	r24, 0xA0	; 160
 4b8:	9f e0       	ldi	r25, 0x0F	; 15
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <get_key+0x26>
		_delay_ms(10);
		temp = getPin(port_name);
 4be:	80 2f       	mov	r24, r16
 4c0:	0e 94 1a 02 	call	0x434	; 0x434 <getPin>

			return translate(temp);
 4c4:	99 27       	eor	r25, r25
 4c6:	87 fd       	sbrc	r24, 7
 4c8:	90 95       	com	r25
 4ca:	0e 94 31 02 	call	0x462	; 0x462 <translate>
 4ce:	18 2f       	mov	r17, r24
 4d0:	37 c0       	rjmp	.+110    	; 0x540 <get_key+0xac>
		
	}
	
	if(type == 'D' | type =='d')
 4d2:	84 34       	cpi	r24, 0x44	; 68
 4d4:	21 f0       	breq	.+8      	; 0x4de <get_key+0x4a>
 4d6:	84 36       	cpi	r24, 0x64	; 100
 4d8:	11 f0       	breq	.+4      	; 0x4de <get_key+0x4a>
 4da:	10 e0       	ldi	r17, 0x00	; 0
 4dc:	31 c0       	rjmp	.+98     	; 0x540 <get_key+0xac>
 4de:	10 e0       	ldi	r17, 0x00	; 0
 4e0:	c4 e0       	ldi	r28, 0x04	; 4
 4e2:	d0 e0       	ldi	r29, 0x00	; 0
		Tutaj w zasadzie idac za tym pomyslem az sie prosi to skumulowac do 4 bitow w ukladzie 0x_ _ _ _ W W K K i miec 4 bity wolne, ale to tylko dywagacja
					*/
			for(int col=4; col<8; col++) // column
			{
				state = ~(1<<col);
				setPort(port_name, state);
 4e4:	41 e0       	ldi	r20, 0x01	; 1
 4e6:	c4 2e       	mov	r12, r20
 4e8:	d1 2c       	mov	r13, r1
 4ea:	30 ea       	ldi	r19, 0xA0	; 160
 4ec:	e3 2e       	mov	r14, r19
 4ee:	3f e0       	ldi	r19, 0x0F	; 15
 4f0:	f3 2e       	mov	r15, r19
 4f2:	b6 01       	movw	r22, r12
 4f4:	0c 2e       	mov	r0, r28
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <get_key+0x68>
 4f8:	66 0f       	add	r22, r22
 4fa:	77 1f       	adc	r23, r23
 4fc:	0a 94       	dec	r0
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <get_key+0x64>
 500:	60 95       	com	r22
 502:	80 2f       	mov	r24, r16
 504:	0e 94 06 02 	call	0x40c	; 0x40c <setPort>
 508:	c7 01       	movw	r24, r14
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <get_key+0x76>
				_delay_ms(10);
				temp = getPin(port_name);
 50e:	80 2f       	mov	r24, r16
 510:	0e 94 1a 02 	call	0x434	; 0x434 <getPin>
				row = translate(temp);
 514:	99 27       	eor	r25, r25
 516:	87 fd       	sbrc	r24, 7
 518:	90 95       	com	r25
 51a:	0e 94 31 02 	call	0x462	; 0x462 <translate>
				if(row != 0)
 51e:	88 23       	and	r24, r24
 520:	59 f0       	breq	.+22     	; 0x538 <get_key+0xa4>
					ret_key_index_number = (row-1)*4 + col - 3;
 522:	99 27       	eor	r25, r25
 524:	87 fd       	sbrc	r24, 7
 526:	90 95       	com	r25
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	18 2f       	mov	r17, r24
 534:	13 50       	subi	r17, 0x03	; 3
 536:	1c 0f       	add	r17, r28
		
		l_port = getPin(port_name) & 0x0F;
		h_port = getPin(port_name) &0xF0;
		Tutaj w zasadzie idac za tym pomyslem az sie prosi to skumulowac do 4 bitow w ukladzie 0x_ _ _ _ W W K K i miec 4 bity wolne, ale to tylko dywagacja
					*/
			for(int col=4; col<8; col++) // column
 538:	21 96       	adiw	r28, 0x01	; 1
 53a:	c8 30       	cpi	r28, 0x08	; 8
 53c:	d1 05       	cpc	r29, r1
 53e:	c9 f6       	brne	.-78     	; 0x4f2 <get_key+0x5e>
			return ret_key_index_number;
		
		
		
	
}//koniec getKey
 540:	81 2f       	mov	r24, r17
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	1f 91       	pop	r17
 548:	0f 91       	pop	r16
 54a:	ff 90       	pop	r15
 54c:	ef 90       	pop	r14
 54e:	df 90       	pop	r13
 550:	cf 90       	pop	r12
 552:	08 95       	ret

00000554 <setDDR>:
#include "lcd_lib.h"
#include <string.h>

// Helper function to set the DDR register for the specified port
void setDDR(LCD *lcd, char port) {
 554:	fc 01       	movw	r30, r24
    switch (port) {
 556:	62 34       	cpi	r22, 0x42	; 66
 558:	89 f0       	breq	.+34     	; 0x57c <setDDR+0x28>
 55a:	63 34       	cpi	r22, 0x43	; 67
 55c:	18 f4       	brcc	.+6      	; 0x564 <setDDR+0x10>
 55e:	61 34       	cpi	r22, 0x41	; 65
 560:	19 f5       	brne	.+70     	; 0x5a8 <setDDR+0x54>
 562:	05 c0       	rjmp	.+10     	; 0x56e <setDDR+0x1a>
 564:	63 34       	cpi	r22, 0x43	; 67
 566:	89 f0       	breq	.+34     	; 0x58a <setDDR+0x36>
 568:	64 34       	cpi	r22, 0x44	; 68
 56a:	f1 f4       	brne	.+60     	; 0x5a8 <setDDR+0x54>
 56c:	15 c0       	rjmp	.+42     	; 0x598 <setDDR+0x44>
        case 'A': lcd->ddr = &DDRA; lcd->port = &PORTA; break;
 56e:	8a e3       	ldi	r24, 0x3A	; 58
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	91 83       	std	Z+1, r25	; 0x01
 574:	80 83       	st	Z, r24
 576:	8b e3       	ldi	r24, 0x3B	; 59
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	14 c0       	rjmp	.+40     	; 0x5a4 <setDDR+0x50>
        case 'B': lcd->ddr = &DDRB; lcd->port = &PORTB; break;
 57c:	87 e3       	ldi	r24, 0x37	; 55
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	91 83       	std	Z+1, r25	; 0x01
 582:	80 83       	st	Z, r24
 584:	88 e3       	ldi	r24, 0x38	; 56
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0d c0       	rjmp	.+26     	; 0x5a4 <setDDR+0x50>
		case 'C': lcd->ddr = &DDRC; lcd->port = &PORTC; break;
 58a:	84 e3       	ldi	r24, 0x34	; 52
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	91 83       	std	Z+1, r25	; 0x01
 590:	80 83       	st	Z, r24
 592:	85 e3       	ldi	r24, 0x35	; 53
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	06 c0       	rjmp	.+12     	; 0x5a4 <setDDR+0x50>
		case 'D': lcd->ddr = &DDRD; lcd->port = &PORTD; break;
 598:	81 e3       	ldi	r24, 0x31	; 49
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	91 83       	std	Z+1, r25	; 0x01
 59e:	80 83       	st	Z, r24
 5a0:	82 e3       	ldi	r24, 0x32	; 50
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	93 83       	std	Z+3, r25	; 0x03
 5a6:	82 83       	std	Z+2, r24	; 0x02
    }
    *(lcd->ddr) = 0xFF; // Set as output
 5a8:	01 90       	ld	r0, Z+
 5aa:	f0 81       	ld	r31, Z
 5ac:	e0 2d       	mov	r30, r0
 5ae:	8f ef       	ldi	r24, 0xFF	; 255
 5b0:	80 83       	st	Z, r24
}
 5b2:	08 95       	ret

000005b4 <LCD_send4BitCommand>:

// Function to send a 4-bit command to the LCD
void LCD_send4BitCommand(LCD *lcd, char command) {
 5b4:	dc 01       	movw	r26, r24
    *(lcd->port) |= _BV(LCD_E); // Enable high
 5b6:	12 96       	adiw	r26, 0x02	; 2
 5b8:	ed 91       	ld	r30, X+
 5ba:	fc 91       	ld	r31, X
 5bc:	13 97       	sbiw	r26, 0x03	; 3
 5be:	80 81       	ld	r24, Z
 5c0:	81 60       	ori	r24, 0x01	; 1
 5c2:	80 83       	st	Z, r24
    // Send high nibble
    *(lcd->port) = (*(lcd->port) & 0x0F) | (command & 0xF0);
 5c4:	12 96       	adiw	r26, 0x02	; 2
 5c6:	ed 91       	ld	r30, X+
 5c8:	fc 91       	ld	r31, X
 5ca:	13 97       	sbiw	r26, 0x03	; 3
 5cc:	80 81       	ld	r24, Z
 5ce:	60 7f       	andi	r22, 0xF0	; 240
 5d0:	8f 70       	andi	r24, 0x0F	; 15
 5d2:	86 2b       	or	r24, r22
 5d4:	80 83       	st	Z, r24
    *(lcd->port) &= ~_BV(LCD_E); // Enable low
 5d6:	12 96       	adiw	r26, 0x02	; 2
 5d8:	ed 91       	ld	r30, X+
 5da:	fc 91       	ld	r31, X
 5dc:	13 97       	sbiw	r26, 0x03	; 3
 5de:	80 81       	ld	r24, Z
 5e0:	8e 7f       	andi	r24, 0xFE	; 254
 5e2:	80 83       	st	Z, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	8a 95       	dec	r24
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <LCD_send4BitCommand+0x32>
    _delay_us(1);
}
 5ea:	08 95       	ret

000005ec <LCD_writeCharacter>:
    for (uint8_t i = x; i < 16; i++) {
        LCD_writeCharacter(lcd, ' ');
    }
}

void LCD_writeCharacter(LCD *lcd, char c) {
 5ec:	ff 92       	push	r15
 5ee:	0f 93       	push	r16
 5f0:	1f 93       	push	r17
 5f2:	8c 01       	movw	r16, r24
 5f4:	f6 2e       	mov	r15, r22
    *(lcd->port) |= _BV(LCD_RS); // RS high for data
 5f6:	dc 01       	movw	r26, r24
 5f8:	12 96       	adiw	r26, 0x02	; 2
 5fa:	ed 91       	ld	r30, X+
 5fc:	fc 91       	ld	r31, X
 5fe:	13 97       	sbiw	r26, 0x03	; 3
 600:	80 81       	ld	r24, Z
 602:	82 60       	ori	r24, 0x02	; 2
 604:	80 83       	st	Z, r24
    LCD_send4BitCommand(lcd, c & 0xF0); // Send high nibble
 606:	60 7f       	andi	r22, 0xF0	; 240
 608:	c8 01       	movw	r24, r16
 60a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_send4BitCommand>
    LCD_send4BitCommand(lcd, c << 4); // Send low nibble
 60e:	f2 94       	swap	r15
 610:	80 ef       	ldi	r24, 0xF0	; 240
 612:	f8 22       	and	r15, r24
 614:	c8 01       	movw	r24, r16
 616:	6f 2d       	mov	r22, r15
 618:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_send4BitCommand>
 61c:	8d e0       	ldi	r24, 0x0D	; 13
 61e:	8a 95       	dec	r24
 620:	f1 f7       	brne	.-4      	; 0x61e <LCD_writeCharacter+0x32>
    _delay_us(40);
}
 622:	1f 91       	pop	r17
 624:	0f 91       	pop	r16
 626:	ff 90       	pop	r15
 628:	08 95       	ret

0000062a <LCD_sendInstruction>:
void LCD_setCoursor(LCD *lcd, uint8_t x, uint8_t y) {
    uint8_t address = (y * 0x40 + x) | 0x80;
    LCD_sendInstruction(lcd, address);
}

void LCD_sendInstruction(LCD *lcd, uint8_t cmd) {
 62a:	ff 92       	push	r15
 62c:	0f 93       	push	r16
 62e:	1f 93       	push	r17
 630:	8c 01       	movw	r16, r24
 632:	f6 2e       	mov	r15, r22
    *(lcd->port) &= ~_BV(LCD_RS); // RS low for instruction
 634:	dc 01       	movw	r26, r24
 636:	12 96       	adiw	r26, 0x02	; 2
 638:	ed 91       	ld	r30, X+
 63a:	fc 91       	ld	r31, X
 63c:	13 97       	sbiw	r26, 0x03	; 3
 63e:	80 81       	ld	r24, Z
 640:	8d 7f       	andi	r24, 0xFD	; 253
 642:	80 83       	st	Z, r24
    LCD_send4BitCommand(lcd, cmd & 0xF0); // Send high nibble
 644:	60 7f       	andi	r22, 0xF0	; 240
 646:	c8 01       	movw	r24, r16
 648:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_send4BitCommand>
    LCD_send4BitCommand(lcd, cmd << 4); // Send low nibble
 64c:	f2 94       	swap	r15
 64e:	90 ef       	ldi	r25, 0xF0	; 240
 650:	f9 22       	and	r15, r25
 652:	c8 01       	movw	r24, r16
 654:	6f 2d       	mov	r22, r15
 656:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_send4BitCommand>
 65a:	8d e0       	ldi	r24, 0x0D	; 13
 65c:	8a 95       	dec	r24
 65e:	f1 f7       	brne	.-4      	; 0x65c <LCD_sendInstruction+0x32>
    _delay_us(40);
}
 660:	1f 91       	pop	r17
 662:	0f 91       	pop	r16
 664:	ff 90       	pop	r15
 666:	08 95       	ret

00000668 <LCD_setCoursor>:
    }
}

void LCD_setCoursor(LCD *lcd, uint8_t x, uint8_t y) {
    uint8_t address = (y * 0x40 + x) | 0x80;
    LCD_sendInstruction(lcd, address);
 668:	42 95       	swap	r20
 66a:	44 0f       	add	r20, r20
 66c:	44 0f       	add	r20, r20
 66e:	40 7c       	andi	r20, 0xC0	; 192
 670:	46 0f       	add	r20, r22
 672:	40 68       	ori	r20, 0x80	; 128
 674:	64 2f       	mov	r22, r20
 676:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_sendInstruction>
}
 67a:	08 95       	ret

0000067c <LCD_clearFromPoint>:
void LCD_clear(LCD *lcd) {
    LCD_sendInstruction(lcd, 0x01); // Clear display command
    _delay_ms(2); // Clearing delay
}

void LCD_clearFromPoint(LCD *lcd, uint8_t x, uint8_t y) {
 67c:	1f 93       	push	r17
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
 682:	ec 01       	movw	r28, r24
 684:	16 2f       	mov	r17, r22
    LCD_setCoursor(lcd, x, y);
 686:	0e 94 34 03 	call	0x668	; 0x668 <LCD_setCoursor>
 68a:	05 c0       	rjmp	.+10     	; 0x696 <LCD_clearFromPoint+0x1a>
    for (uint8_t i = x; i < 16; i++) {
        LCD_writeCharacter(lcd, ' ');
 68c:	ce 01       	movw	r24, r28
 68e:	60 e2       	ldi	r22, 0x20	; 32
 690:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_writeCharacter>
    _delay_ms(2); // Clearing delay
}

void LCD_clearFromPoint(LCD *lcd, uint8_t x, uint8_t y) {
    LCD_setCoursor(lcd, x, y);
    for (uint8_t i = x; i < 16; i++) {
 694:	1f 5f       	subi	r17, 0xFF	; 255
 696:	10 31       	cpi	r17, 0x10	; 16
 698:	c8 f3       	brcs	.-14     	; 0x68c <LCD_clearFromPoint+0x10>
        LCD_writeCharacter(lcd, ' ');
    }
}
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	1f 91       	pop	r17
 6a0:	08 95       	ret

000006a2 <LCD_writeText>:
    LCD_send4BitCommand(lcd, c & 0xF0); // Send high nibble
    LCD_send4BitCommand(lcd, c << 4); // Send low nibble
    _delay_us(40);
}

void LCD_writeText(LCD *lcd, char *text) {
 6a2:	cf 92       	push	r12
 6a4:	df 92       	push	r13
 6a6:	ef 92       	push	r14
 6a8:	ff 92       	push	r15
 6aa:	1f 93       	push	r17
 6ac:	cf 93       	push	r28
 6ae:	df 93       	push	r29
 6b0:	7c 01       	movw	r14, r24
 6b2:	6b 01       	movw	r12, r22
 6b4:	10 e0       	ldi	r17, 0x00	; 0
 6b6:	0b c0       	rjmp	.+22     	; 0x6ce <LCD_writeText+0x2c>
    for (uint8_t i = 0; text[i] != '\0'; i++) {
        if (i == 16) LCD_sendInstruction(lcd, 0xC0); // Move to next line
 6b8:	10 31       	cpi	r17, 0x10	; 16
 6ba:	21 f4       	brne	.+8      	; 0x6c4 <LCD_writeText+0x22>
 6bc:	c7 01       	movw	r24, r14
 6be:	60 ec       	ldi	r22, 0xC0	; 192
 6c0:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_sendInstruction>
        LCD_writeCharacter(lcd, text[i]);
 6c4:	c7 01       	movw	r24, r14
 6c6:	68 81       	ld	r22, Y
 6c8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_writeCharacter>
    LCD_send4BitCommand(lcd, c << 4); // Send low nibble
    _delay_us(40);
}

void LCD_writeText(LCD *lcd, char *text) {
    for (uint8_t i = 0; text[i] != '\0'; i++) {
 6cc:	1f 5f       	subi	r17, 0xFF	; 255
 6ce:	e6 01       	movw	r28, r12
 6d0:	c1 0f       	add	r28, r17
 6d2:	d1 1d       	adc	r29, r1
 6d4:	88 81       	ld	r24, Y
 6d6:	88 23       	and	r24, r24
 6d8:	79 f7       	brne	.-34     	; 0x6b8 <LCD_writeText+0x16>
        if (i == 16) LCD_sendInstruction(lcd, 0xC0); // Move to next line
        LCD_writeCharacter(lcd, text[i]);
    }
}
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	1f 91       	pop	r17
 6e0:	ff 90       	pop	r15
 6e2:	ef 90       	pop	r14
 6e4:	df 90       	pop	r13
 6e6:	cf 90       	pop	r12
 6e8:	08 95       	ret

000006ea <LCD_clear>:
    LCD_clear(lcd); // Clear Display
    LCD_sendInstruction(lcd, 0x06); // Entry Mode: Increment cursor, No shift
}

void LCD_clear(LCD *lcd) {
    LCD_sendInstruction(lcd, 0x01); // Clear display command
 6ea:	61 e0       	ldi	r22, 0x01	; 1
 6ec:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_sendInstruction>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 6f0:	84 ef       	ldi	r24, 0xF4	; 244
 6f2:	91 e0       	ldi	r25, 0x01	; 1
 6f4:	01 97       	sbiw	r24, 0x01	; 1
 6f6:	f1 f7       	brne	.-4      	; 0x6f4 <LCD_clear+0xa>
    _delay_ms(2); // Clearing delay
}
 6f8:	08 95       	ret

000006fa <LCD_init>:
    *(lcd->port) = (*(lcd->port) & 0x0F) | (command & 0xF0);
    *(lcd->port) &= ~_BV(LCD_E); // Enable low
    _delay_us(1);
}

void LCD_init(LCD *lcd, char port) {
 6fa:	ff 92       	push	r15
 6fc:	0f 93       	push	r16
 6fe:	1f 93       	push	r17
 700:	8c 01       	movw	r16, r24
    setDDR(lcd, port);
 702:	0e 94 aa 02 	call	0x554	; 0x554 <setDDR>
 706:	88 e8       	ldi	r24, 0x88	; 136
 708:	93 e1       	ldi	r25, 0x13	; 19
 70a:	01 97       	sbiw	r24, 0x01	; 1
 70c:	f1 f7       	brne	.-4      	; 0x70a <LCD_init+0x10>
    _delay_ms(20); // Wait for more than 15ms after VCC rises to 4.5V

    // Set to 4-bit mode
    LCD_send4BitCommand(lcd, 0x30);
 70e:	c8 01       	movw	r24, r16
 710:	60 e3       	ldi	r22, 0x30	; 48
 712:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_send4BitCommand>
 716:	82 ee       	ldi	r24, 0xE2	; 226
 718:	94 e0       	ldi	r25, 0x04	; 4
 71a:	01 97       	sbiw	r24, 0x01	; 1
 71c:	f1 f7       	brne	.-4      	; 0x71a <LCD_init+0x20>
    _delay_ms(5);
    LCD_send4BitCommand(lcd, 0x30);
 71e:	c8 01       	movw	r24, r16
 720:	60 e3       	ldi	r22, 0x30	; 48
 722:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_send4BitCommand>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 726:	21 e2       	ldi	r18, 0x21	; 33
 728:	f2 2e       	mov	r15, r18
 72a:	8f 2d       	mov	r24, r15
 72c:	8a 95       	dec	r24
 72e:	f1 f7       	brne	.-4      	; 0x72c <LCD_init+0x32>
    _delay_us(100);
    LCD_send4BitCommand(lcd, 0x30);
 730:	c8 01       	movw	r24, r16
 732:	60 e3       	ldi	r22, 0x30	; 48
 734:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_send4BitCommand>
 738:	8f 2d       	mov	r24, r15
 73a:	8a 95       	dec	r24
 73c:	f1 f7       	brne	.-4      	; 0x73a <LCD_init+0x40>
    _delay_us(100);
    LCD_send4BitCommand(lcd, 0x20);
 73e:	c8 01       	movw	r24, r16
 740:	60 e2       	ldi	r22, 0x20	; 32
 742:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_send4BitCommand>
 746:	fa 94       	dec	r15
 748:	f1 f7       	brne	.-4      	; 0x746 <LCD_init+0x4c>
    _delay_us(100);

    LCD_sendInstruction(lcd, 0x28); // Function Set: 4-bit, 2 Line, 5x8 dots
 74a:	c8 01       	movw	r24, r16
 74c:	68 e2       	ldi	r22, 0x28	; 40
 74e:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_sendInstruction>
    LCD_sendInstruction(lcd, 0x0C); // Display ON, Cursor OFF, Blink OFF
 752:	c8 01       	movw	r24, r16
 754:	6c e0       	ldi	r22, 0x0C	; 12
 756:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_sendInstruction>
    LCD_clear(lcd); // Clear Display
 75a:	c8 01       	movw	r24, r16
 75c:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_clear>
    LCD_sendInstruction(lcd, 0x06); // Entry Mode: Increment cursor, No shift
 760:	c8 01       	movw	r24, r16
 762:	66 e0       	ldi	r22, 0x06	; 6
 764:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_sendInstruction>
}
 768:	1f 91       	pop	r17
 76a:	0f 91       	pop	r16
 76c:	ff 90       	pop	r15
 76e:	08 95       	ret

00000770 <menu_init>:
#include <string.h>


Menu menus[MAX_MENUS];

void menu_init(Menu *menu, uint8_t id, LCD *lcd, Menu *parentMenu) {
 770:	fc 01       	movw	r30, r24
    menu->id = id;
 772:	60 83       	st	Z, r22
    menu->itemCount = 0;
 774:	e1 54       	subi	r30, 0x41	; 65
 776:	ff 4f       	sbci	r31, 0xFF	; 255
 778:	11 92       	st	Z+, r1
    menu->current = 0;
 77a:	11 92       	st	Z+, r1
    menu->lcd = lcd;
 77c:	41 93       	st	Z+, r20
 77e:	51 93       	st	Z+, r21
	menu->parentMenu = parentMenu;
 780:	31 83       	std	Z+1, r19	; 0x01
 782:	20 83       	st	Z, r18
 784:	e3 5c       	subi	r30, 0xC3	; 195
 786:	f0 40       	sbci	r31, 0x00	; 0
    menus[id] = *menu; // Store the menu in the global array
 788:	70 e0       	ldi	r23, 0x00	; 0
 78a:	85 ec       	ldi	r24, 0xC5	; 197
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	68 9f       	mul	r22, r24
 790:	d0 01       	movw	r26, r0
 792:	69 9f       	mul	r22, r25
 794:	b0 0d       	add	r27, r0
 796:	78 9f       	mul	r23, r24
 798:	b0 0d       	add	r27, r0
 79a:	11 24       	eor	r1, r1
 79c:	a7 5e       	subi	r26, 0xE7	; 231
 79e:	ba 4f       	sbci	r27, 0xFA	; 250
 7a0:	85 ec       	ldi	r24, 0xC5	; 197
 7a2:	01 90       	ld	r0, Z+
 7a4:	0d 92       	st	X+, r0
 7a6:	81 50       	subi	r24, 0x01	; 1
 7a8:	e1 f7       	brne	.-8      	; 0x7a2 <menu_init+0x32>
}
 7aa:	08 95       	ret

000007ac <menu_selectItem>:
        menu->current--;
        menu_display(menu);
    }
}

void menu_selectItem(Menu *menu) {
 7ac:	dc 01       	movw	r26, r24
    if (menu->items[menu->current].action) {
 7ae:	a0 54       	subi	r26, 0x40	; 64
 7b0:	bf 4f       	sbci	r27, 0xFF	; 255
 7b2:	8c 91       	ld	r24, X
 7b4:	a0 5c       	subi	r26, 0xC0	; 192
 7b6:	b0 40       	sbci	r27, 0x00	; 0
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	23 e1       	ldi	r18, 0x13	; 19
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	82 9f       	mul	r24, r18
 7c0:	f0 01       	movw	r30, r0
 7c2:	83 9f       	mul	r24, r19
 7c4:	f0 0d       	add	r31, r0
 7c6:	92 9f       	mul	r25, r18
 7c8:	f0 0d       	add	r31, r0
 7ca:	11 24       	eor	r1, r1
 7cc:	ea 0f       	add	r30, r26
 7ce:	fb 1f       	adc	r31, r27
 7d0:	02 88       	ldd	r0, Z+18	; 0x12
 7d2:	f3 89       	ldd	r31, Z+19	; 0x13
 7d4:	e0 2d       	mov	r30, r0
 7d6:	30 97       	sbiw	r30, 0x00	; 0
 7d8:	11 f0       	breq	.+4      	; 0x7de <menu_selectItem+0x32>
        menu->items[menu->current].action(menu);
 7da:	cd 01       	movw	r24, r26
 7dc:	09 95       	icall
 7de:	08 95       	ret

000007e0 <menu_display>:
        menu->itemCount++;
    }
}


void menu_display(Menu *menu) {
 7e0:	af 92       	push	r10
 7e2:	bf 92       	push	r11
 7e4:	cf 92       	push	r12
 7e6:	df 92       	push	r13
 7e8:	ef 92       	push	r14
 7ea:	ff 92       	push	r15
 7ec:	0f 93       	push	r16
 7ee:	1f 93       	push	r17
 7f0:	cf 93       	push	r28
 7f2:	df 93       	push	r29
 7f4:	ec 01       	movw	r28, r24
    LCD_clear(menu->lcd);
 7f6:	cf 53       	subi	r28, 0x3F	; 63
 7f8:	df 4f       	sbci	r29, 0xFF	; 255
 7fa:	88 81       	ld	r24, Y
 7fc:	99 81       	ldd	r25, Y+1	; 0x01
 7fe:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_clear>
    uint8_t start = menu->current;
 802:	4a 91       	ld	r20, -Y
    uint8_t end = start + 1 < menu->itemCount ? start + 1 : start;
 804:	24 2f       	mov	r18, r20
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	2f 5f       	subi	r18, 0xFF	; 255
 80a:	3f 4f       	sbci	r19, 0xFF	; 255
 80c:	8a 91       	ld	r24, -Y
 80e:	cf 5b       	subi	r28, 0xBF	; 191
 810:	d0 40       	sbci	r29, 0x00	; 0
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	28 17       	cp	r18, r24
 816:	39 07       	cpc	r19, r25
 818:	14 f0       	brlt	.+4      	; 0x81e <menu_display+0x3e>
 81a:	b4 2e       	mov	r11, r20
 81c:	02 c0       	rjmp	.+4      	; 0x822 <menu_display+0x42>
 81e:	b4 2e       	mov	r11, r20
 820:	b3 94       	inc	r11
 822:	f4 2e       	mov	r15, r20
 824:	ee 24       	eor	r14, r14

    for (uint8_t i = start; i <= end; i++) {
        LCD_setCoursor(menu->lcd, 0, i - start);
 826:	8e 01       	movw	r16, r28
 828:	0f 53       	subi	r16, 0x3F	; 63
 82a:	1f 4f       	sbci	r17, 0xFF	; 255
        if (i == menu->current) {
 82c:	90 ec       	ldi	r25, 0xC0	; 192
 82e:	c9 2e       	mov	r12, r25
 830:	d1 2c       	mov	r13, r1
 832:	cc 0e       	add	r12, r28
 834:	dd 1e       	adc	r13, r29
            LCD_writeCharacter(menu->lcd, '>');
        }
        LCD_writeText(menu->lcd, menu->items[i].text);
 836:	83 e1       	ldi	r24, 0x13	; 19
 838:	a8 2e       	mov	r10, r24
 83a:	1f c0       	rjmp	.+62     	; 0x87a <__stack+0x1b>
    LCD_clear(menu->lcd);
    uint8_t start = menu->current;
    uint8_t end = start + 1 < menu->itemCount ? start + 1 : start;

    for (uint8_t i = start; i <= end; i++) {
        LCD_setCoursor(menu->lcd, 0, i - start);
 83c:	f8 01       	movw	r30, r16
 83e:	80 81       	ld	r24, Z
 840:	91 81       	ldd	r25, Z+1	; 0x01
 842:	60 e0       	ldi	r22, 0x00	; 0
 844:	4e 2d       	mov	r20, r14
 846:	0e 94 34 03 	call	0x668	; 0x668 <LCD_setCoursor>
        if (i == menu->current) {
 84a:	f6 01       	movw	r30, r12
 84c:	80 81       	ld	r24, Z
 84e:	f8 16       	cp	r15, r24
 850:	31 f4       	brne	.+12     	; 0x85e <menu_display+0x7e>
            LCD_writeCharacter(menu->lcd, '>');
 852:	f8 01       	movw	r30, r16
 854:	80 81       	ld	r24, Z
 856:	91 81       	ldd	r25, Z+1	; 0x01
 858:	6e e3       	ldi	r22, 0x3E	; 62
 85a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_writeCharacter>
        }
        LCD_writeText(menu->lcd, menu->items[i].text);
 85e:	fa 9c       	mul	r15, r10
 860:	b0 01       	movw	r22, r0
 862:	11 24       	eor	r1, r1
 864:	6f 5f       	subi	r22, 0xFF	; 255
 866:	7f 4f       	sbci	r23, 0xFF	; 255
 868:	6c 0f       	add	r22, r28
 86a:	7d 1f       	adc	r23, r29
 86c:	f8 01       	movw	r30, r16
 86e:	80 81       	ld	r24, Z
 870:	91 81       	ldd	r25, Z+1	; 0x01
 872:	0e 94 51 03 	call	0x6a2	; 0x6a2 <LCD_writeText>
void menu_display(Menu *menu) {
    LCD_clear(menu->lcd);
    uint8_t start = menu->current;
    uint8_t end = start + 1 < menu->itemCount ? start + 1 : start;

    for (uint8_t i = start; i <= end; i++) {
 876:	f3 94       	inc	r15
 878:	e3 94       	inc	r14
 87a:	bf 14       	cp	r11, r15
 87c:	f8 f6       	brcc	.-66     	; 0x83c <menu_display+0x5c>
        if (i == menu->current) {
            LCD_writeCharacter(menu->lcd, '>');
        }
        LCD_writeText(menu->lcd, menu->items[i].text);
    }
}
 87e:	df 91       	pop	r29
 880:	cf 91       	pop	r28
 882:	1f 91       	pop	r17
 884:	0f 91       	pop	r16
 886:	ff 90       	pop	r15
 888:	ef 90       	pop	r14
 88a:	df 90       	pop	r13
 88c:	cf 90       	pop	r12
 88e:	bf 90       	pop	r11
 890:	af 90       	pop	r10
 892:	08 95       	ret

00000894 <menu_goto>:
        menu_display(menu->parentMenu);
    }
}

void menu_goto(Menu *currentMenu, uint8_t targetMenuId) {
    if (targetMenuId < MAX_MENUS) {
 894:	65 30       	cpi	r22, 0x05	; 5
 896:	40 f4       	brcc	.+16     	; 0x8a8 <menu_goto+0x14>
        menu_display(&menus[targetMenuId]);
 898:	85 ec       	ldi	r24, 0xC5	; 197
 89a:	68 9f       	mul	r22, r24
 89c:	c0 01       	movw	r24, r0
 89e:	11 24       	eor	r1, r1
 8a0:	87 5e       	subi	r24, 0xE7	; 231
 8a2:	9a 4f       	sbci	r25, 0xFA	; 250
 8a4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <menu_display>
 8a8:	08 95       	ret

000008aa <menu_return>:
    }
}


void menu_return(Menu *menu) {
    if (menu->parentMenu) {
 8aa:	fc 01       	movw	r30, r24
 8ac:	ed 53       	subi	r30, 0x3D	; 61
 8ae:	ff 4f       	sbci	r31, 0xFF	; 255
 8b0:	80 81       	ld	r24, Z
 8b2:	91 81       	ldd	r25, Z+1	; 0x01
 8b4:	00 97       	sbiw	r24, 0x00	; 0
 8b6:	11 f0       	breq	.+4      	; 0x8bc <menu_return+0x12>
        menu_display(menu->parentMenu);
 8b8:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <menu_display>
 8bc:	08 95       	ret

000008be <menu_prevItem>:
        menu_display(menu);
    }
}

void menu_prevItem(Menu *menu) {
    if (menu->current > 0) {
 8be:	fc 01       	movw	r30, r24
 8c0:	e0 54       	subi	r30, 0x40	; 64
 8c2:	ff 4f       	sbci	r31, 0xFF	; 255
 8c4:	20 81       	ld	r18, Z
 8c6:	22 23       	and	r18, r18
 8c8:	21 f0       	breq	.+8      	; 0x8d2 <menu_prevItem+0x14>
        menu->current--;
 8ca:	21 50       	subi	r18, 0x01	; 1
 8cc:	20 83       	st	Z, r18
        menu_display(menu);
 8ce:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <menu_display>
 8d2:	08 95       	ret

000008d4 <menu_nextItem>:
        }
        LCD_writeText(menu->lcd, menu->items[i].text);
    }
}

void menu_nextItem(Menu *menu) {
 8d4:	fc 01       	movw	r30, r24
    if (menu->current < menu->itemCount - 1) {
 8d6:	dc 01       	movw	r26, r24
 8d8:	a0 54       	subi	r26, 0x40	; 64
 8da:	bf 4f       	sbci	r27, 0xFF	; 255
 8dc:	4c 91       	ld	r20, X
 8de:	24 2f       	mov	r18, r20
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	e1 54       	subi	r30, 0x41	; 65
 8e4:	ff 4f       	sbci	r31, 0xFF	; 255
 8e6:	80 81       	ld	r24, Z
 8e8:	ef 5b       	subi	r30, 0xBF	; 191
 8ea:	f0 40       	sbci	r31, 0x00	; 0
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	01 97       	sbiw	r24, 0x01	; 1
 8f0:	28 17       	cp	r18, r24
 8f2:	39 07       	cpc	r19, r25
 8f4:	2c f4       	brge	.+10     	; 0x900 <menu_nextItem+0x2c>
        menu->current++;
 8f6:	4f 5f       	subi	r20, 0xFF	; 255
 8f8:	4c 93       	st	X, r20
        menu_display(menu);
 8fa:	cf 01       	movw	r24, r30
 8fc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <menu_display>
 900:	08 95       	ret

00000902 <menu_addItem>:
        menu->itemCount++;
    }
}
*/

void menu_addItem(Menu *menu, const char *text, void (*action)(Menu *)) {
 902:	ef 92       	push	r14
 904:	ff 92       	push	r15
 906:	0f 93       	push	r16
 908:	1f 93       	push	r17
 90a:	cf 93       	push	r28
 90c:	df 93       	push	r29
 90e:	8c 01       	movw	r16, r24
 910:	7a 01       	movw	r14, r20
    if (menu->itemCount < MAX_MENU_ITEMS) {
 912:	ec 01       	movw	r28, r24
 914:	c1 54       	subi	r28, 0x41	; 65
 916:	df 4f       	sbci	r29, 0xFF	; 255
 918:	98 81       	ld	r25, Y
 91a:	9a 30       	cpi	r25, 0x0A	; 10
 91c:	e8 f4       	brcc	.+58     	; 0x958 <menu_addItem+0x56>
        strncpy(menu->items[menu->itemCount].text, text, MAX_MENU_LENGTH);
 91e:	83 e1       	ldi	r24, 0x13	; 19
 920:	98 9f       	mul	r25, r24
 922:	c0 01       	movw	r24, r0
 924:	11 24       	eor	r1, r1
 926:	01 96       	adiw	r24, 0x01	; 1
 928:	80 0f       	add	r24, r16
 92a:	91 1f       	adc	r25, r17
 92c:	40 e1       	ldi	r20, 0x10	; 16
 92e:	50 e0       	ldi	r21, 0x00	; 0
 930:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <strncpy>
        menu->items[menu->itemCount].action = action;
 934:	88 81       	ld	r24, Y
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	23 e1       	ldi	r18, 0x13	; 19
 93a:	30 e0       	ldi	r19, 0x00	; 0
 93c:	82 9f       	mul	r24, r18
 93e:	f0 01       	movw	r30, r0
 940:	83 9f       	mul	r24, r19
 942:	f0 0d       	add	r31, r0
 944:	92 9f       	mul	r25, r18
 946:	f0 0d       	add	r31, r0
 948:	11 24       	eor	r1, r1
 94a:	e0 0f       	add	r30, r16
 94c:	f1 1f       	adc	r31, r17
 94e:	f3 8a       	std	Z+19, r15	; 0x13
 950:	e2 8a       	std	Z+18, r14	; 0x12
        menu->itemCount++;
 952:	88 81       	ld	r24, Y
 954:	8f 5f       	subi	r24, 0xFF	; 255
 956:	88 83       	st	Y, r24
    }
}
 958:	df 91       	pop	r29
 95a:	cf 91       	pop	r28
 95c:	1f 91       	pop	r17
 95e:	0f 91       	pop	r16
 960:	ff 90       	pop	r15
 962:	ef 90       	pop	r14
 964:	08 95       	ret

00000966 <moveNext>:
#include "menu2.h"
#include <stdio.h>
#include <stdbool.h>

bool moveNext(MenuOption **root) {
 966:	dc 01       	movw	r26, r24
    if (root == NULL || (*root)->next == NULL)
 968:	00 97       	sbiw	r24, 0x00	; 0
 96a:	59 f0       	breq	.+22     	; 0x982 <moveNext+0x1c>
 96c:	ed 91       	ld	r30, X+
 96e:	fc 91       	ld	r31, X
 970:	11 97       	sbiw	r26, 0x01	; 1
 972:	84 81       	ldd	r24, Z+4	; 0x04
 974:	95 81       	ldd	r25, Z+5	; 0x05
 976:	00 97       	sbiw	r24, 0x00	; 0
 978:	21 f0       	breq	.+8      	; 0x982 <moveNext+0x1c>
        return false;
    *root = (*root)->next;
 97a:	8d 93       	st	X+, r24
 97c:	9c 93       	st	X, r25
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	08 95       	ret
    return true;
 982:	80 e0       	ldi	r24, 0x00	; 0
}
 984:	08 95       	ret

00000986 <movePrev>:

bool movePrev(MenuOption **root) {
 986:	dc 01       	movw	r26, r24
    if (root == NULL || (*root)->prev == NULL)
 988:	00 97       	sbiw	r24, 0x00	; 0
 98a:	59 f0       	breq	.+22     	; 0x9a2 <movePrev+0x1c>
 98c:	ed 91       	ld	r30, X+
 98e:	fc 91       	ld	r31, X
 990:	11 97       	sbiw	r26, 0x01	; 1
 992:	82 81       	ldd	r24, Z+2	; 0x02
 994:	93 81       	ldd	r25, Z+3	; 0x03
 996:	00 97       	sbiw	r24, 0x00	; 0
 998:	21 f0       	breq	.+8      	; 0x9a2 <movePrev+0x1c>
        return false;
    *root = (*root)->prev;
 99a:	8d 93       	st	X+, r24
 99c:	9c 93       	st	X, r25
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	08 95       	ret
    return true;
 9a2:	80 e0       	ldi	r24, 0x00	; 0
}
 9a4:	08 95       	ret

000009a6 <moveToChild>:

bool moveToChild(MenuOption **root) {
 9a6:	dc 01       	movw	r26, r24
    if (root == NULL || (*root)->child == NULL)
 9a8:	00 97       	sbiw	r24, 0x00	; 0
 9aa:	59 f0       	breq	.+22     	; 0x9c2 <moveToChild+0x1c>
 9ac:	ed 91       	ld	r30, X+
 9ae:	fc 91       	ld	r31, X
 9b0:	11 97       	sbiw	r26, 0x01	; 1
 9b2:	86 81       	ldd	r24, Z+6	; 0x06
 9b4:	97 81       	ldd	r25, Z+7	; 0x07
 9b6:	00 97       	sbiw	r24, 0x00	; 0
 9b8:	21 f0       	breq	.+8      	; 0x9c2 <moveToChild+0x1c>
        return false;
    *root = (*root)->child;
 9ba:	8d 93       	st	X+, r24
 9bc:	9c 93       	st	X, r25
 9be:	81 e0       	ldi	r24, 0x01	; 1
 9c0:	08 95       	ret
    return true;
 9c2:	80 e0       	ldi	r24, 0x00	; 0
}
 9c4:	08 95       	ret

000009c6 <moveToParent>:

bool moveToParent(MenuOption **root) {
 9c6:	dc 01       	movw	r26, r24
    if (root == NULL || (*root)->parent == NULL)
 9c8:	00 97       	sbiw	r24, 0x00	; 0
 9ca:	59 f0       	breq	.+22     	; 0x9e2 <moveToParent+0x1c>
 9cc:	ed 91       	ld	r30, X+
 9ce:	fc 91       	ld	r31, X
 9d0:	11 97       	sbiw	r26, 0x01	; 1
 9d2:	80 85       	ldd	r24, Z+8	; 0x08
 9d4:	91 85       	ldd	r25, Z+9	; 0x09
 9d6:	00 97       	sbiw	r24, 0x00	; 0
 9d8:	21 f0       	breq	.+8      	; 0x9e2 <moveToParent+0x1c>
        return false;
    *root = (*root)->parent;
 9da:	8d 93       	st	X+, r24
 9dc:	9c 93       	st	X, r25
 9de:	81 e0       	ldi	r24, 0x01	; 1
 9e0:	08 95       	ret
    return true;
 9e2:	80 e0       	ldi	r24, 0x00	; 0
}
 9e4:	08 95       	ret

000009e6 <initMenu>:

void initMenu(MenuOption **root) {
 9e6:	0f 93       	push	r16
 9e8:	1f 93       	push	r17
 9ea:	8c 01       	movw	r16, r24
    static MenuOption option1, option2, option3;
    static MenuOption option1_1, option1_2;
    static MenuOption option2_1, option2_2;

    // ================== option 1 ==================
    option1.title = "Menu 1";
 9ec:	62 e3       	ldi	r22, 0x32	; 50
 9ee:	71 e0       	ldi	r23, 0x01	; 1
 9f0:	80 ea       	ldi	r24, 0xA0	; 160
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	90 93 33 01 	sts	0x0133, r25
 9f8:	80 93 32 01 	sts	0x0132, r24
    option1.next = &option2;
 9fc:	a4 e2       	ldi	r26, 0x24	; 36
 9fe:	b1 e0       	ldi	r27, 0x01	; 1
 a00:	b0 93 37 01 	sts	0x0137, r27
 a04:	a0 93 36 01 	sts	0x0136, r26
    option1.prev = NULL;
 a08:	10 92 35 01 	sts	0x0135, r1
 a0c:	10 92 34 01 	sts	0x0134, r1
    option1.child = NULL;
    option1.parent = NULL;
 a10:	10 92 3b 01 	sts	0x013B, r1
 a14:	10 92 3a 01 	sts	0x013A, r1
    option1.actionForward = &moveToChild;
 a18:	e3 ed       	ldi	r30, 0xD3	; 211
 a1a:	f4 e0       	ldi	r31, 0x04	; 4
 a1c:	f0 93 3d 01 	sts	0x013D, r31
 a20:	e0 93 3c 01 	sts	0x013C, r30
    option1.actionBackward = &moveToParent;
 a24:	23 ee       	ldi	r18, 0xE3	; 227
 a26:	34 e0       	ldi	r19, 0x04	; 4
 a28:	30 93 3f 01 	sts	0x013F, r19
 a2c:	20 93 3e 01 	sts	0x013E, r18

    // ================== option 2 ==================
    option2.title = "Menu 2";
 a30:	87 ea       	ldi	r24, 0xA7	; 167
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	90 93 25 01 	sts	0x0125, r25
 a38:	80 93 24 01 	sts	0x0124, r24
    option2.next = &option3;
 a3c:	86 e1       	ldi	r24, 0x16	; 22
 a3e:	91 e0       	ldi	r25, 0x01	; 1
 a40:	90 93 29 01 	sts	0x0129, r25
 a44:	80 93 28 01 	sts	0x0128, r24
    option2.prev = &option1;
 a48:	70 93 27 01 	sts	0x0127, r23
 a4c:	60 93 26 01 	sts	0x0126, r22
    option2.child = NULL;
    option2.parent = NULL;
 a50:	10 92 2d 01 	sts	0x012D, r1
 a54:	10 92 2c 01 	sts	0x012C, r1
    option2.actionForward = &moveToChild;
 a58:	f0 93 2f 01 	sts	0x012F, r31
 a5c:	e0 93 2e 01 	sts	0x012E, r30
    option2.actionBackward = &moveToParent;
 a60:	30 93 31 01 	sts	0x0131, r19
 a64:	20 93 30 01 	sts	0x0130, r18

    // ================== option 3 ==================
    option3.title = "Menu 3";
 a68:	8e ea       	ldi	r24, 0xAE	; 174
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	90 93 17 01 	sts	0x0117, r25
 a70:	80 93 16 01 	sts	0x0116, r24
    option3.next = NULL;
 a74:	10 92 1b 01 	sts	0x011B, r1
 a78:	10 92 1a 01 	sts	0x011A, r1
    option3.prev = &option2;
 a7c:	b0 93 19 01 	sts	0x0119, r27
 a80:	a0 93 18 01 	sts	0x0118, r26
    option3.child = NULL;
 a84:	10 92 1d 01 	sts	0x011D, r1
 a88:	10 92 1c 01 	sts	0x011C, r1
    option3.parent = NULL;
 a8c:	10 92 1f 01 	sts	0x011F, r1
 a90:	10 92 1e 01 	sts	0x011E, r1
    option3.actionForward = &moveToChild;
 a94:	f0 93 21 01 	sts	0x0121, r31
 a98:	e0 93 20 01 	sts	0x0120, r30
    option3.actionBackward = &moveToParent;
 a9c:	30 93 23 01 	sts	0x0123, r19
 aa0:	20 93 22 01 	sts	0x0122, r18

    // ================== option 1_1 ==================
    option1_1.title = "Menu 1_1";
 aa4:	48 e0       	ldi	r20, 0x08	; 8
 aa6:	51 e0       	ldi	r21, 0x01	; 1
 aa8:	85 eb       	ldi	r24, 0xB5	; 181
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	90 93 09 01 	sts	0x0109, r25
 ab0:	80 93 08 01 	sts	0x0108, r24
    option1_1.next = &option1_2;
 ab4:	8a ef       	ldi	r24, 0xFA	; 250
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	90 93 0d 01 	sts	0x010D, r25
 abc:	80 93 0c 01 	sts	0x010C, r24
    option1_1.prev = NULL;
 ac0:	10 92 0b 01 	sts	0x010B, r1
 ac4:	10 92 0a 01 	sts	0x010A, r1
    option1_1.child = NULL;
 ac8:	10 92 0f 01 	sts	0x010F, r1
 acc:	10 92 0e 01 	sts	0x010E, r1
    option1_1.parent = &option1;
 ad0:	70 93 11 01 	sts	0x0111, r23
 ad4:	60 93 10 01 	sts	0x0110, r22
    option1.child = &option1_1; // link parent
 ad8:	50 93 39 01 	sts	0x0139, r21
 adc:	40 93 38 01 	sts	0x0138, r20
    option1_1.actionForward = NULL;
 ae0:	10 92 13 01 	sts	0x0113, r1
 ae4:	10 92 12 01 	sts	0x0112, r1
    option1_1.actionBackward = &moveToParent;
 ae8:	30 93 15 01 	sts	0x0115, r19
 aec:	20 93 14 01 	sts	0x0114, r18

    // ================== option 1_2 ==================
    option1_2.title = "Menu 1_2";
 af0:	8e eb       	ldi	r24, 0xBE	; 190
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	90 93 fb 00 	sts	0x00FB, r25
 af8:	80 93 fa 00 	sts	0x00FA, r24
    option1_2.next = NULL;
 afc:	10 92 ff 00 	sts	0x00FF, r1
 b00:	10 92 fe 00 	sts	0x00FE, r1
    option1_2.prev = &option1_1;
 b04:	50 93 fd 00 	sts	0x00FD, r21
 b08:	40 93 fc 00 	sts	0x00FC, r20
    option1_2.child = NULL;
 b0c:	10 92 01 01 	sts	0x0101, r1
 b10:	10 92 00 01 	sts	0x0100, r1
    option1_2.parent = &option1;
 b14:	70 93 03 01 	sts	0x0103, r23
 b18:	60 93 02 01 	sts	0x0102, r22
    option1_2.actionForward = NULL;
 b1c:	10 92 05 01 	sts	0x0105, r1
 b20:	10 92 04 01 	sts	0x0104, r1
    option1_2.actionBackward = &moveToParent;
 b24:	30 93 07 01 	sts	0x0107, r19
 b28:	20 93 06 01 	sts	0x0106, r18

    // ================== option 2_1 ==================
    option2_1.title = "Menu 2_1";
 b2c:	4c ee       	ldi	r20, 0xEC	; 236
 b2e:	50 e0       	ldi	r21, 0x00	; 0
 b30:	87 ec       	ldi	r24, 0xC7	; 199
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	90 93 ed 00 	sts	0x00ED, r25
 b38:	80 93 ec 00 	sts	0x00EC, r24
    option2_1.next = &option2_2;
 b3c:	8e ed       	ldi	r24, 0xDE	; 222
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	90 93 f1 00 	sts	0x00F1, r25
 b44:	80 93 f0 00 	sts	0x00F0, r24
    option2_1.prev = NULL;
 b48:	10 92 ef 00 	sts	0x00EF, r1
 b4c:	10 92 ee 00 	sts	0x00EE, r1
    option2_1.child = NULL;
 b50:	10 92 f3 00 	sts	0x00F3, r1
 b54:	10 92 f2 00 	sts	0x00F2, r1
    option2_1.parent = &option2;
 b58:	b0 93 f5 00 	sts	0x00F5, r27
 b5c:	a0 93 f4 00 	sts	0x00F4, r26
    option2.child = &option2_1; // link parent
 b60:	50 93 2b 01 	sts	0x012B, r21
 b64:	40 93 2a 01 	sts	0x012A, r20
    option2_1.actionForward = NULL;
 b68:	10 92 f7 00 	sts	0x00F7, r1
 b6c:	10 92 f6 00 	sts	0x00F6, r1
    option2_1.actionBackward = &moveToParent;
 b70:	30 93 f9 00 	sts	0x00F9, r19
 b74:	20 93 f8 00 	sts	0x00F8, r18

    // ================== option 1_2 ==================
    option2_2.title = "Menu 2_2";
 b78:	80 ed       	ldi	r24, 0xD0	; 208
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	90 93 df 00 	sts	0x00DF, r25
 b80:	80 93 de 00 	sts	0x00DE, r24
    option2_2.next = NULL;
 b84:	10 92 e3 00 	sts	0x00E3, r1
 b88:	10 92 e2 00 	sts	0x00E2, r1
    option2_2.prev = &option2_1;
 b8c:	50 93 e1 00 	sts	0x00E1, r21
 b90:	40 93 e0 00 	sts	0x00E0, r20
    option2_2.child = &option1;
 b94:	70 93 e5 00 	sts	0x00E5, r23
 b98:	60 93 e4 00 	sts	0x00E4, r22
    option2_2.parent = &option2;
 b9c:	b0 93 e7 00 	sts	0x00E7, r27
 ba0:	a0 93 e6 00 	sts	0x00E6, r26
    option2_2.actionForward = &moveToChild;
 ba4:	f0 93 e9 00 	sts	0x00E9, r31
 ba8:	e0 93 e8 00 	sts	0x00E8, r30
    option2_2.actionBackward = &moveToParent;
 bac:	30 93 eb 00 	sts	0x00EB, r19
 bb0:	20 93 ea 00 	sts	0x00EA, r18

    // ============= return initial value =============
    *root = &option1;
 bb4:	f8 01       	movw	r30, r16
 bb6:	71 83       	std	Z+1, r23	; 0x01
 bb8:	60 83       	st	Z, r22
}
 bba:	1f 91       	pop	r17
 bbc:	0f 91       	pop	r16
 bbe:	08 95       	ret

00000bc0 <strncpy>:
 bc0:	fb 01       	movw	r30, r22
 bc2:	dc 01       	movw	r26, r24
 bc4:	41 50       	subi	r20, 0x01	; 1
 bc6:	50 40       	sbci	r21, 0x00	; 0
 bc8:	48 f0       	brcs	.+18     	; 0xbdc <strncpy+0x1c>
 bca:	01 90       	ld	r0, Z+
 bcc:	0d 92       	st	X+, r0
 bce:	00 20       	and	r0, r0
 bd0:	c9 f7       	brne	.-14     	; 0xbc4 <strncpy+0x4>
 bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <strncpy+0x16>
 bd4:	1d 92       	st	X+, r1
 bd6:	41 50       	subi	r20, 0x01	; 1
 bd8:	50 40       	sbci	r21, 0x00	; 0
 bda:	e0 f7       	brcc	.-8      	; 0xbd4 <strncpy+0x14>
 bdc:	08 95       	ret

00000bde <_exit>:
 bde:	f8 94       	cli

00000be0 <__stop_program>:
 be0:	ff cf       	rjmp	.-2      	; 0xbe0 <__stop_program>
